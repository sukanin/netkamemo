//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/8/2022 4:43:00 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DotBambooDAL
{

    [DatabaseAttribute(Name = "dotbamboo")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DotBambooDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DotBambooDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUserAccount(UserAccount instance);
        partial void UpdateUserAccount(UserAccount instance);
        partial void DeleteUserAccount(UserAccount instance);
        partial void InsertRoleUserAccount(RoleUserAccount instance);
        partial void UpdateRoleUserAccount(RoleUserAccount instance);
        partial void DeleteRoleUserAccount(RoleUserAccount instance);
        partial void InsertRoleCapability(RoleCapability instance);
        partial void UpdateRoleCapability(RoleCapability instance);
        partial void DeleteRoleCapability(RoleCapability instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertMenuItem(MenuItem instance);
        partial void UpdateMenuItem(MenuItem instance);
        partial void DeleteMenuItem(MenuItem instance);
        partial void InsertCapability(Capability instance);
        partial void UpdateCapability(Capability instance);
        partial void DeleteCapability(Capability instance);
        partial void InsertPurchaseItem(PurchaseItem instance);
        partial void UpdatePurchaseItem(PurchaseItem instance);
        partial void DeletePurchaseItem(PurchaseItem instance);
        partial void InsertPurchase(Purchase instance);
        partial void UpdatePurchase(Purchase instance);
        partial void DeletePurchase(Purchase instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertUserApprover(UserApprover instance);
        partial void UpdateUserApprover(UserApprover instance);
        partial void DeleteUserApprover(UserApprover instance);
        partial void InsertUserPurchase(UserPurchase instance);
        partial void UpdateUserPurchase(UserPurchase instance);
        partial void DeleteUserPurchase(UserPurchase instance);
        partial void InsertUserReviewer(UserReviewer instance);
        partial void UpdateUserReviewer(UserReviewer instance);
        partial void DeleteUserReviewer(UserReviewer instance);
        partial void InsertEmail(Email instance);
        partial void UpdateEmail(Email instance);
        partial void DeleteEmail(Email instance);
        partial void InsertPurchaseTodo(PurchaseTodo instance);
        partial void UpdatePurchaseTodo(PurchaseTodo instance);
        partial void DeletePurchaseTodo(PurchaseTodo instance);
        partial void InsertPurchaseOrder(PurchaseOrder instance);
        partial void UpdatePurchaseOrder(PurchaseOrder instance);
        partial void DeletePurchaseOrder(PurchaseOrder instance);
        partial void InsertPurchaseOrderItem(PurchaseOrderItem instance);
        partial void UpdatePurchaseOrderItem(PurchaseOrderItem instance);
        partial void DeletePurchaseOrderItem(PurchaseOrderItem instance);
        partial void InsertPurchaseAttachment(PurchaseAttachment instance);
        partial void UpdatePurchaseAttachment(PurchaseAttachment instance);
        partial void DeletePurchaseAttachment(PurchaseAttachment instance);
        partial void InsertAccountCode(AccountCode instance);
        partial void UpdateAccountCode(AccountCode instance);
        partial void DeleteAccountCode(AccountCode instance);
        partial void InsertCostCenter(CostCenter instance);
        partial void UpdateCostCenter(CostCenter instance);
        partial void DeleteCostCenter(CostCenter instance);
        partial void InsertPmOrder(PmOrder instance);
        partial void UpdatePmOrder(PmOrder instance);
        partial void DeletePmOrder(PmOrder instance);
        partial void InsertNotification(Notification instance);
        partial void UpdateNotification(Notification instance);
        partial void DeleteNotification(Notification instance);
        partial void InsertPurchaseOrderTodo(PurchaseOrderTodo instance);
        partial void UpdatePurchaseOrderTodo(PurchaseOrderTodo instance);
        partial void DeletePurchaseOrderTodo(PurchaseOrderTodo instance);
        partial void InsertPurchaseOrderAttachment(PurchaseOrderAttachment instance);
        partial void UpdatePurchaseOrderAttachment(PurchaseOrderAttachment instance);
        partial void DeletePurchaseOrderAttachment(PurchaseOrderAttachment instance);
        partial void InsertVendor(Vendor instance);
        partial void UpdateVendor(Vendor instance);
        partial void DeleteVendor(Vendor instance);
        partial void InsertPurchaseOrderCancel(PurchaseOrderCancel instance);
        partial void UpdatePurchaseOrderCancel(PurchaseOrderCancel instance);
        partial void DeletePurchaseOrderCancel(PurchaseOrderCancel instance);
        partial void InsertUnit(Unit instance);
        partial void UpdateUnit(Unit instance);
        partial void DeleteUnit(Unit instance);
        partial void InsertAudit(Audit instance);
        partial void UpdateAudit(Audit instance);
        partial void DeleteAudit(Audit instance);
        partial void InsertAuditObject(AuditObject instance);
        partial void UpdateAuditObject(AuditObject instance);
        partial void DeleteAuditObject(AuditObject instance);
        partial void InsertAuditObjectProperty(AuditObjectProperty instance);
        partial void UpdateAuditObjectProperty(AuditObjectProperty instance);
        partial void DeleteAuditObjectProperty(AuditObjectProperty instance);
        partial void InsertPurchaseForecastAttachment(PurchaseForecastAttachment instance);
        partial void UpdatePurchaseForecastAttachment(PurchaseForecastAttachment instance);
        partial void DeletePurchaseForecastAttachment(PurchaseForecastAttachment instance);
        partial void InsertGoodsReceived(GoodsReceived instance);
        partial void UpdateGoodsReceived(GoodsReceived instance);
        partial void DeleteGoodsReceived(GoodsReceived instance);
        partial void InsertUserPoApprover(UserPoApprover instance);
        partial void UpdateUserPoApprover(UserPoApprover instance);
        partial void DeleteUserPoApprover(UserPoApprover instance);
        partial void InsertUserPoReviewer1(UserPoReviewer1 instance);
        partial void UpdateUserPoReviewer1(UserPoReviewer1 instance);
        partial void DeleteUserPoReviewer1(UserPoReviewer1 instance);
        partial void InsertUserPoReviewer2(UserPoReviewer2 instance);
        partial void UpdateUserPoReviewer2(UserPoReviewer2 instance);
        partial void DeleteUserPoReviewer2(UserPoReviewer2 instance);
        partial void InsertUserApprover2(UserApprover2 instance);
        partial void UpdateUserApprover2(UserApprover2 instance);
        partial void DeleteUserApprover2(UserApprover2 instance);
        partial void InsertBomMaster(BomMaster instance);
        partial void UpdateBomMaster(BomMaster instance);
        partial void DeleteBomMaster(BomMaster instance);
        partial void InsertGoodsRec(GoodsRec instance);
        partial void UpdateGoodsRec(GoodsRec instance);
        partial void DeleteGoodsRec(GoodsRec instance);
        partial void InsertItemMaster(ItemMaster instance);
        partial void UpdateItemMaster(ItemMaster instance);
        partial void DeleteItemMaster(ItemMaster instance);
        partial void InsertRelationMaster(RelationMaster instance);
        partial void UpdateRelationMaster(RelationMaster instance);
        partial void DeleteRelationMaster(RelationMaster instance);
        partial void InsertSupplierMaster(SupplierMaster instance);
        partial void UpdateSupplierMaster(SupplierMaster instance);
        partial void DeleteSupplierMaster(SupplierMaster instance);
        partial void InsertSupplierEvaluation(SupplierEvaluation instance);
        partial void UpdateSupplierEvaluation(SupplierEvaluation instance);
        partial void DeleteSupplierEvaluation(SupplierEvaluation instance);
        partial void InsertMemo(Memo instance);
        partial void UpdateMemo(Memo instance);
        partial void DeleteMemo(Memo instance);
        partial void InsertMemoAttachment(MemoAttachment instance);
        partial void UpdateMemoAttachment(MemoAttachment instance);
        partial void DeleteMemoAttachment(MemoAttachment instance);

        #endregion

        public DotBambooDataContext() :
        base(GetConnectionString("DotBambooConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DotBambooDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DotBambooConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DotBambooDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DotBambooDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DotBambooDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DotBambooDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<UserAccount> UserAccounts
        {
            get
            {
                return this.GetTable<UserAccount>();
            }
        }

        public Devart.Data.Linq.Table<RoleUserAccount> RoleUserAccounts
        {
            get
            {
                return this.GetTable<RoleUserAccount>();
            }
        }

        public Devart.Data.Linq.Table<RoleCapability> RoleCapabilities
        {
            get
            {
                return this.GetTable<RoleCapability>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<MenuItem> MenuItems
        {
            get
            {
                return this.GetTable<MenuItem>();
            }
        }

        public Devart.Data.Linq.Table<Capability> Capabilities
        {
            get
            {
                return this.GetTable<Capability>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseItem> PurchaseItems
        {
            get
            {
                return this.GetTable<PurchaseItem>();
            }
        }

        public Devart.Data.Linq.Table<Purchase> Purchases
        {
            get
            {
                return this.GetTable<Purchase>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<UserApprover> UserApprovers
        {
            get
            {
                return this.GetTable<UserApprover>();
            }
        }

        public Devart.Data.Linq.Table<UserPurchase> UserPurchases
        {
            get
            {
                return this.GetTable<UserPurchase>();
            }
        }

        public Devart.Data.Linq.Table<UserReviewer> UserReviewers
        {
            get
            {
                return this.GetTable<UserReviewer>();
            }
        }

        public Devart.Data.Linq.Table<Email> Emails
        {
            get
            {
                return this.GetTable<Email>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseTodo> PurchaseTodos
        {
            get
            {
                return this.GetTable<PurchaseTodo>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrder> PurchaseOrders
        {
            get
            {
                return this.GetTable<PurchaseOrder>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderItem> PurchaseOrderItems
        {
            get
            {
                return this.GetTable<PurchaseOrderItem>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseAttachment> PurchaseAttachments
        {
            get
            {
                return this.GetTable<PurchaseAttachment>();
            }
        }

        public Devart.Data.Linq.Table<AccountCode> AccountCodes
        {
            get
            {
                return this.GetTable<AccountCode>();
            }
        }

        public Devart.Data.Linq.Table<CostCenter> CostCenters
        {
            get
            {
                return this.GetTable<CostCenter>();
            }
        }

        public Devart.Data.Linq.Table<PmOrder> PmOrders
        {
            get
            {
                return this.GetTable<PmOrder>();
            }
        }

        public Devart.Data.Linq.Table<Notification> Notifications
        {
            get
            {
                return this.GetTable<Notification>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderTodo> PurchaseOrderTodos
        {
            get
            {
                return this.GetTable<PurchaseOrderTodo>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderAttachment> PurchaseOrderAttachments
        {
            get
            {
                return this.GetTable<PurchaseOrderAttachment>();
            }
        }

        public Devart.Data.Linq.Table<Vendor> Vendors
        {
            get
            {
                return this.GetTable<Vendor>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseOrderCancel> PurchaseOrderCancels
        {
            get
            {
                return this.GetTable<PurchaseOrderCancel>();
            }
        }

        public Devart.Data.Linq.Table<Unit> Units
        {
            get
            {
                return this.GetTable<Unit>();
            }
        }

        public Devart.Data.Linq.Table<Audit> Audits
        {
            get
            {
                return this.GetTable<Audit>();
            }
        }

        public Devart.Data.Linq.Table<AuditObject> AuditObjects
        {
            get
            {
                return this.GetTable<AuditObject>();
            }
        }

        public Devart.Data.Linq.Table<AuditObjectProperty> AuditObjectProperties
        {
            get
            {
                return this.GetTable<AuditObjectProperty>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseForecastAttachment> PurchaseForecastAttachments
        {
            get
            {
                return this.GetTable<PurchaseForecastAttachment>();
            }
        }

        public Devart.Data.Linq.Table<GoodsReceived> GoodsReceiveds
        {
            get
            {
                return this.GetTable<GoodsReceived>();
            }
        }

        public Devart.Data.Linq.Table<UserPoApprover> UserPoApprovers
        {
            get
            {
                return this.GetTable<UserPoApprover>();
            }
        }

        public Devart.Data.Linq.Table<UserPoReviewer1> UserPoReviewer1s
        {
            get
            {
                return this.GetTable<UserPoReviewer1>();
            }
        }

        public Devart.Data.Linq.Table<UserPoReviewer2> UserPoReviewer2s
        {
            get
            {
                return this.GetTable<UserPoReviewer2>();
            }
        }

        public Devart.Data.Linq.Table<UserApprover2> UserApprover2s
        {
            get
            {
                return this.GetTable<UserApprover2>();
            }
        }

        public Devart.Data.Linq.Table<BomMaster> BomMasters
        {
            get
            {
                return this.GetTable<BomMaster>();
            }
        }

        public Devart.Data.Linq.Table<GoodsRec> GoodsRecs
        {
            get
            {
                return this.GetTable<GoodsRec>();
            }
        }

        public Devart.Data.Linq.Table<ItemMaster> ItemMasters
        {
            get
            {
                return this.GetTable<ItemMaster>();
            }
        }

        public Devart.Data.Linq.Table<RelationMaster> RelationMasters
        {
            get
            {
                return this.GetTable<RelationMaster>();
            }
        }

        public Devart.Data.Linq.Table<SupplierMaster> SupplierMasters
        {
            get
            {
                return this.GetTable<SupplierMaster>();
            }
        }

        public Devart.Data.Linq.Table<SupplierEvaluation> SupplierEvaluations
        {
            get
            {
                return this.GetTable<SupplierEvaluation>();
            }
        }

        public Devart.Data.Linq.Table<Memo> Memos
        {
            get
            {
                return this.GetTable<Memo>();
            }
        }

        public Devart.Data.Linq.Table<MemoAttachment> MemoAttachments
        {
            get
            {
                return this.GetTable<MemoAttachment>();
            }
        }
    }
}

namespace DotBambooDAL
{

    /// <summary>
    /// There are no comments for DotBambooDAL.UserAccount in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_account")]
    public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserAccountId;

        private string _Username;

        private string _Password;

        private string _Name;

        private string _Position;

        private string _Email;

        private bool _IsActive;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;

        private string _Section;
        #pragma warning restore 0649

        private EntitySet<RoleUserAccount> _RoleUserAccounts;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        partial void OnSectionChanging(string value);
        partial void OnSectionChanged();
        #endregion

        public UserAccount()
        {
            this._RoleUserAccounts = new EntitySet<RoleUserAccount>(new Action<RoleUserAccount>(this.attach_RoleUserAccounts), new Action<RoleUserAccount>(this.detach_RoleUserAccounts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Name = @"position", Storage = "_Position", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsActive in the schema.
        /// </summary>
        [Column(Name = @"is_active", Storage = "_IsActive", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if (this._IsActive != value)
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Section in the schema.
        /// </summary>
        [Column(Name = @"section", Storage = "_Section", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Section
        {
            get
            {
                return this._Section;
            }
            set
            {
                if (this._Section != value)
                {
                    this.OnSectionChanging(value);
                    this.SendPropertyChanging();
                    this._Section = value;
                    this.SendPropertyChanged("Section");
                    this.OnSectionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleUserAccounts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserAccount_RoleUserAccount", Storage="_RoleUserAccounts", ThisKey="UserAccountId", OtherKey="UserAccountId", DeleteRule="RESTRICT")]
        public EntitySet<RoleUserAccount> RoleUserAccounts
        {
            get
            {
                return this._RoleUserAccounts;
            }
            set
            {
                this._RoleUserAccounts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RoleUserAccounts(RoleUserAccount entity)
        {
            this.SendPropertyChanging("RoleUserAccounts");
            entity.UserAccount = this;
        }
    
        private void detach_RoleUserAccounts(RoleUserAccount entity)
        {
            this.SendPropertyChanging("RoleUserAccounts");
            entity.UserAccount = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.RoleUserAccount in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.role_user_account")]
    public partial class RoleUserAccount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleUserAccountId;

        private int _RoleId;

        private int _UserAccountId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<UserAccount> _UserAccount;

        private EntityRef<Role> _Role;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleUserAccountIdChanging(int value);
        partial void OnRoleUserAccountIdChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public RoleUserAccount()
        {
            this._UserAccount  = default(EntityRef<UserAccount>);
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"role_user_account_id", Storage = "_RoleUserAccountId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleUserAccountId
        {
            get
            {
                return this._RoleUserAccountId;
            }
            set
            {
                if (this._RoleUserAccountId != value)
                {
                    this.OnRoleUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._RoleUserAccountId = value;
                    this.SendPropertyChanged("RoleUserAccountId");
                    this.OnRoleUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"role_id", Storage = "_RoleId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging();
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    if (this._UserAccount.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccount in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserAccount_RoleUserAccount", Storage="_UserAccount", ThisKey="UserAccountId", OtherKey="UserAccountId", IsForeignKey=true)]
        public UserAccount UserAccount
        {
            get
            {
                return this._UserAccount.Entity;
            }
            set
            {
                UserAccount previousValue = this._UserAccount.Entity;
                if ((previousValue != value) || (this._UserAccount.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._UserAccount.Entity = null;
                        previousValue.RoleUserAccounts.Remove(this);
                    }
                    this._UserAccount.Entity = value;
                    if (value != null)
                    {
                        this._UserAccountId = value.UserAccountId;
                        value.RoleUserAccounts.Add(this);
                    }
                    else
                    {
                        this._UserAccountId = default(int);
                    }
                    this.SendPropertyChanged("UserAccount");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_RoleUserAccount", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.RoleUserAccounts.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleId = value.RoleId;
                        value.RoleUserAccounts.Add(this);
                    }
                    else
                    {
                        this._RoleId = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.RoleCapability in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.role_capability")]
    public partial class RoleCapability : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleCapabilityId;

        private int _RoleId;

        private int _CapabilityId;

        private int _AccessFlag;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<Capability> _Capability;

        private EntityRef<Role> _Role;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleCapabilityIdChanging(int value);
        partial void OnRoleCapabilityIdChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnCapabilityIdChanging(int value);
        partial void OnCapabilityIdChanged();
        partial void OnAccessFlagChanging(int value);
        partial void OnAccessFlagChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public RoleCapability()
        {
            this._Capability  = default(EntityRef<Capability>);
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleCapabilityId in the schema.
        /// </summary>
        [Column(Name = @"role_capability_id", Storage = "_RoleCapabilityId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleCapabilityId
        {
            get
            {
                return this._RoleCapabilityId;
            }
            set
            {
                if (this._RoleCapabilityId != value)
                {
                    this.OnRoleCapabilityIdChanging(value);
                    this.SendPropertyChanging();
                    this._RoleCapabilityId = value;
                    this.SendPropertyChanged("RoleCapabilityId");
                    this.OnRoleCapabilityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"role_id", Storage = "_RoleId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging();
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CapabilityId in the schema.
        /// </summary>
        [Column(Name = @"capability_id", Storage = "_CapabilityId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CapabilityId
        {
            get
            {
                return this._CapabilityId;
            }
            set
            {
                if (this._CapabilityId != value)
                {
                    if (this._Capability.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCapabilityIdChanging(value);
                    this.SendPropertyChanging();
                    this._CapabilityId = value;
                    this.SendPropertyChanged("CapabilityId");
                    this.OnCapabilityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccessFlag in the schema.
        /// </summary>
        [Column(Name = @"access_flag", Storage = "_AccessFlag", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AccessFlag
        {
            get
            {
                return this._AccessFlag;
            }
            set
            {
                if (this._AccessFlag != value)
                {
                    this.OnAccessFlagChanging(value);
                    this.SendPropertyChanging();
                    this._AccessFlag = value;
                    this.SendPropertyChanged("AccessFlag");
                    this.OnAccessFlagChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Capability in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Capability_RoleCapability", Storage="_Capability", ThisKey="CapabilityId", OtherKey="CapabilityId", IsForeignKey=true)]
        public Capability Capability
        {
            get
            {
                return this._Capability.Entity;
            }
            set
            {
                Capability previousValue = this._Capability.Entity;
                if ((previousValue != value) || (this._Capability.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Capability.Entity = null;
                        previousValue.RoleCapabilities.Remove(this);
                    }
                    this._Capability.Entity = value;
                    if (value != null)
                    {
                        this._CapabilityId = value.CapabilityId;
                        value.RoleCapabilities.Add(this);
                    }
                    else
                    {
                        this._CapabilityId = default(int);
                    }
                    this.SendPropertyChanged("Capability");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_RoleCapability", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.RoleCapabilities.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleId = value.RoleId;
                        value.RoleCapabilities.Add(this);
                    }
                    else
                    {
                        this._RoleId = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Role in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleId;

        private string _RoleName;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntitySet<RoleUserAccount> _RoleUserAccounts;

        private EntitySet<RoleCapability> _RoleCapabilities;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Role()
        {
            this._RoleUserAccounts = new EntitySet<RoleUserAccount>(new Action<RoleUserAccount>(this.attach_RoleUserAccounts), new Action<RoleUserAccount>(this.detach_RoleUserAccounts));
            this._RoleCapabilities = new EntitySet<RoleCapability>(new Action<RoleCapability>(this.attach_RoleCapabilities), new Action<RoleCapability>(this.detach_RoleCapabilities));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"role_id", Storage = "_RoleId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging();
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Name = @"role_name", Storage = "_RoleName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging();
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleUserAccounts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_RoleUserAccount", Storage="_RoleUserAccounts", ThisKey="RoleId", OtherKey="RoleId", DeleteRule="RESTRICT")]
        public EntitySet<RoleUserAccount> RoleUserAccounts
        {
            get
            {
                return this._RoleUserAccounts;
            }
            set
            {
                this._RoleUserAccounts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for RoleCapabilities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_RoleCapability", Storage="_RoleCapabilities", ThisKey="RoleId", OtherKey="RoleId", DeleteRule="RESTRICT")]
        public EntitySet<RoleCapability> RoleCapabilities
        {
            get
            {
                return this._RoleCapabilities;
            }
            set
            {
                this._RoleCapabilities.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RoleUserAccounts(RoleUserAccount entity)
        {
            this.SendPropertyChanging("RoleUserAccounts");
            entity.Role = this;
        }
    
        private void detach_RoleUserAccounts(RoleUserAccount entity)
        {
            this.SendPropertyChanging("RoleUserAccounts");
            entity.Role = null;
        }

        private void attach_RoleCapabilities(RoleCapability entity)
        {
            this.SendPropertyChanging("RoleCapabilities");
            entity.Role = this;
        }
    
        private void detach_RoleCapabilities(RoleCapability entity)
        {
            this.SendPropertyChanging("RoleCapabilities");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.MenuItem in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.menu_item")]
    public partial class MenuItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _MenuItemId;

        private string _MenuItemName;

        private string _Description = @"NULL";

        private string _Url = @"NULL";

        private System.Nullable<int> _ParentMenuItemId;

        private int _DisplaySequence;

        private bool _IsAlwaysEnabled;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntitySet<Capability> _Capabilities;

        private EntitySet<MenuItem> _MenuItems_ParentMenuItemId;

        private EntityRef<MenuItem> _MenuItem_ParentMenuItemId;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMenuItemIdChanging(int value);
        partial void OnMenuItemIdChanged();
        partial void OnMenuItemNameChanging(string value);
        partial void OnMenuItemNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnParentMenuItemIdChanging(System.Nullable<int> value);
        partial void OnParentMenuItemIdChanged();
        partial void OnDisplaySequenceChanging(int value);
        partial void OnDisplaySequenceChanged();
        partial void OnIsAlwaysEnabledChanging(bool value);
        partial void OnIsAlwaysEnabledChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public MenuItem()
        {
            this._Capabilities = new EntitySet<Capability>(new Action<Capability>(this.attach_Capabilities), new Action<Capability>(this.detach_Capabilities));
            this._MenuItems_ParentMenuItemId = new EntitySet<MenuItem>(new Action<MenuItem>(this.attach_MenuItems_ParentMenuItemId), new Action<MenuItem>(this.detach_MenuItems_ParentMenuItemId));
            this._MenuItem_ParentMenuItemId  = default(EntityRef<MenuItem>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MenuItemId in the schema.
        /// </summary>
        [Column(Name = @"menu_item_id", Storage = "_MenuItemId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int MenuItemId
        {
            get
            {
                return this._MenuItemId;
            }
            set
            {
                if (this._MenuItemId != value)
                {
                    this.OnMenuItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._MenuItemId = value;
                    this.SendPropertyChanged("MenuItemId");
                    this.OnMenuItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MenuItemName in the schema.
        /// </summary>
        [Column(Name = @"menu_item_name", Storage = "_MenuItemName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MenuItemName
        {
            get
            {
                return this._MenuItemName;
            }
            set
            {
                if (this._MenuItemName != value)
                {
                    this.OnMenuItemNameChanging(value);
                    this.SendPropertyChanging();
                    this._MenuItemName = value;
                    this.SendPropertyChanged("MenuItemName");
                    this.OnMenuItemNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(1000) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", DbType = "VARCHAR(1000) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging();
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentMenuItemId in the schema.
        /// </summary>
        [Column(Name = @"parent_menu_item_id", Storage = "_ParentMenuItemId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ParentMenuItemId
        {
            get
            {
                return this._ParentMenuItemId;
            }
            set
            {
                if (this._ParentMenuItemId != value)
                {
                    if (this._MenuItem_ParentMenuItemId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentMenuItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentMenuItemId = value;
                    this.SendPropertyChanged("ParentMenuItemId");
                    this.OnParentMenuItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DisplaySequence in the schema.
        /// </summary>
        [Column(Name = @"display_sequence", Storage = "_DisplaySequence", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int DisplaySequence
        {
            get
            {
                return this._DisplaySequence;
            }
            set
            {
                if (this._DisplaySequence != value)
                {
                    this.OnDisplaySequenceChanging(value);
                    this.SendPropertyChanging();
                    this._DisplaySequence = value;
                    this.SendPropertyChanged("DisplaySequence");
                    this.OnDisplaySequenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsAlwaysEnabled in the schema.
        /// </summary>
        [Column(Name = @"is_always_enabled", Storage = "_IsAlwaysEnabled", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsAlwaysEnabled
        {
            get
            {
                return this._IsAlwaysEnabled;
            }
            set
            {
                if (this._IsAlwaysEnabled != value)
                {
                    this.OnIsAlwaysEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._IsAlwaysEnabled = value;
                    this.SendPropertyChanged("IsAlwaysEnabled");
                    this.OnIsAlwaysEnabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Capabilities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MenuItem_Capability", Storage="_Capabilities", ThisKey="MenuItemId", OtherKey="MenuItemId", DeleteRule="RESTRICT")]
        public EntitySet<Capability> Capabilities
        {
            get
            {
                return this._Capabilities;
            }
            set
            {
                this._Capabilities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for MenuItems_ParentMenuItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MenuItem_MenuItem", Storage="_MenuItems_ParentMenuItemId", ThisKey="MenuItemId", OtherKey="ParentMenuItemId", DeleteRule="RESTRICT")]
        public EntitySet<MenuItem> MenuItems_ParentMenuItemId
        {
            get
            {
                return this._MenuItems_ParentMenuItemId;
            }
            set
            {
                this._MenuItems_ParentMenuItemId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for MenuItem_ParentMenuItemId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MenuItem_MenuItem", Storage="_MenuItem_ParentMenuItemId", ThisKey="ParentMenuItemId", OtherKey="MenuItemId", IsForeignKey=true)]
        public MenuItem MenuItem_ParentMenuItemId
        {
            get
            {
                return this._MenuItem_ParentMenuItemId.Entity;
            }
            set
            {
                MenuItem previousValue = this._MenuItem_ParentMenuItemId.Entity;
                if ((previousValue != value) || (this._MenuItem_ParentMenuItemId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._MenuItem_ParentMenuItemId.Entity = null;
                        previousValue.MenuItems_ParentMenuItemId.Remove(this);
                    }
                    this._MenuItem_ParentMenuItemId.Entity = value;
                    if (value != null)
                    {
                        this._ParentMenuItemId = value.MenuItemId;
                        value.MenuItems_ParentMenuItemId.Add(this);
                    }
                    else
                    {
                        this._ParentMenuItemId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("MenuItem_ParentMenuItemId");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Capabilities(Capability entity)
        {
            this.SendPropertyChanging("Capabilities");
            entity.MenuItem = this;
        }
    
        private void detach_Capabilities(Capability entity)
        {
            this.SendPropertyChanging("Capabilities");
            entity.MenuItem = null;
        }

        private void attach_MenuItems_ParentMenuItemId(MenuItem entity)
        {
            this.SendPropertyChanging("MenuItems_ParentMenuItemId");
            entity.MenuItem_ParentMenuItemId = this;
        }
    
        private void detach_MenuItems_ParentMenuItemId(MenuItem entity)
        {
            this.SendPropertyChanging("MenuItems_ParentMenuItemId");
            entity.MenuItem_ParentMenuItemId = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Capability in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.capability")]
    public partial class Capability : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CapabilityId;

        private string _CapabilityName;

        private int _MenuItemId;

        private int _AccessType;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntitySet<RoleCapability> _RoleCapabilities;

        private EntityRef<MenuItem> _MenuItem;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCapabilityIdChanging(int value);
        partial void OnCapabilityIdChanged();
        partial void OnCapabilityNameChanging(string value);
        partial void OnCapabilityNameChanged();
        partial void OnMenuItemIdChanging(int value);
        partial void OnMenuItemIdChanged();
        partial void OnAccessTypeChanging(int value);
        partial void OnAccessTypeChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Capability()
        {
            this._RoleCapabilities = new EntitySet<RoleCapability>(new Action<RoleCapability>(this.attach_RoleCapabilities), new Action<RoleCapability>(this.detach_RoleCapabilities));
            this._MenuItem  = default(EntityRef<MenuItem>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CapabilityId in the schema.
        /// </summary>
        [Column(Name = @"capability_id", Storage = "_CapabilityId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CapabilityId
        {
            get
            {
                return this._CapabilityId;
            }
            set
            {
                if (this._CapabilityId != value)
                {
                    this.OnCapabilityIdChanging(value);
                    this.SendPropertyChanging();
                    this._CapabilityId = value;
                    this.SendPropertyChanged("CapabilityId");
                    this.OnCapabilityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CapabilityName in the schema.
        /// </summary>
        [Column(Name = @"capability_name", Storage = "_CapabilityName", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CapabilityName
        {
            get
            {
                return this._CapabilityName;
            }
            set
            {
                if (this._CapabilityName != value)
                {
                    this.OnCapabilityNameChanging(value);
                    this.SendPropertyChanging();
                    this._CapabilityName = value;
                    this.SendPropertyChanged("CapabilityName");
                    this.OnCapabilityNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MenuItemId in the schema.
        /// </summary>
        [Column(Name = @"menu_item_id", Storage = "_MenuItemId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MenuItemId
        {
            get
            {
                return this._MenuItemId;
            }
            set
            {
                if (this._MenuItemId != value)
                {
                    if (this._MenuItem.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMenuItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._MenuItemId = value;
                    this.SendPropertyChanged("MenuItemId");
                    this.OnMenuItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccessType in the schema.
        /// </summary>
        [Column(Name = @"access_type", Storage = "_AccessType", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AccessType
        {
            get
            {
                return this._AccessType;
            }
            set
            {
                if (this._AccessType != value)
                {
                    this.OnAccessTypeChanging(value);
                    this.SendPropertyChanging();
                    this._AccessType = value;
                    this.SendPropertyChanged("AccessType");
                    this.OnAccessTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleCapabilities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Capability_RoleCapability", Storage="_RoleCapabilities", ThisKey="CapabilityId", OtherKey="CapabilityId", DeleteRule="RESTRICT")]
        public EntitySet<RoleCapability> RoleCapabilities
        {
            get
            {
                return this._RoleCapabilities;
            }
            set
            {
                this._RoleCapabilities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for MenuItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MenuItem_Capability", Storage="_MenuItem", ThisKey="MenuItemId", OtherKey="MenuItemId", IsForeignKey=true)]
        public MenuItem MenuItem
        {
            get
            {
                return this._MenuItem.Entity;
            }
            set
            {
                MenuItem previousValue = this._MenuItem.Entity;
                if ((previousValue != value) || (this._MenuItem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._MenuItem.Entity = null;
                        previousValue.Capabilities.Remove(this);
                    }
                    this._MenuItem.Entity = value;
                    if (value != null)
                    {
                        this._MenuItemId = value.MenuItemId;
                        value.Capabilities.Add(this);
                    }
                    else
                    {
                        this._MenuItemId = default(int);
                    }
                    this.SendPropertyChanged("MenuItem");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RoleCapabilities(RoleCapability entity)
        {
            this.SendPropertyChanging("RoleCapabilities");
            entity.Capability = this;
        }
    
        private void detach_RoleCapabilities(RoleCapability entity)
        {
            this.SendPropertyChanging("RoleCapabilities");
            entity.Capability = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseItem in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_item")]
    public partial class PurchaseItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseItemId;

        private int _PurchaseId;

        private string _PurchaseNumber;

        private int _PurchaseItemSeq;

        private string _PurchaseItemAccode;

        private string _PurchaseItemPn;

        private string _PurchaseItemService;

        private string _PurchaseItemBrand;

        private string _PurchaseItemModel;

        private string _PurchaseItemColor;

        private double _PurchaseItemQty;

        private string _PurchaseItemUnit;

        private double _PurchaseItemUnitPrice;

        private double _PurchaseItemAmount;

        private System.DateTime _InsertDate;

        private string _PurchaseItemPmOrder = @"";

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;

        private string _Vendor;
        #pragma warning restore 0649

        private EntityRef<Purchase> _Purchase;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseItemIdChanging(int value);
        partial void OnPurchaseItemIdChanged();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnPurchaseItemSeqChanging(int value);
        partial void OnPurchaseItemSeqChanged();
        partial void OnPurchaseItemAccodeChanging(string value);
        partial void OnPurchaseItemAccodeChanged();
        partial void OnPurchaseItemPnChanging(string value);
        partial void OnPurchaseItemPnChanged();
        partial void OnPurchaseItemServiceChanging(string value);
        partial void OnPurchaseItemServiceChanged();
        partial void OnPurchaseItemBrandChanging(string value);
        partial void OnPurchaseItemBrandChanged();
        partial void OnPurchaseItemModelChanging(string value);
        partial void OnPurchaseItemModelChanged();
        partial void OnPurchaseItemColorChanging(string value);
        partial void OnPurchaseItemColorChanged();
        partial void OnPurchaseItemQtyChanging(double value);
        partial void OnPurchaseItemQtyChanged();
        partial void OnPurchaseItemUnitChanging(string value);
        partial void OnPurchaseItemUnitChanged();
        partial void OnPurchaseItemUnitPriceChanging(double value);
        partial void OnPurchaseItemUnitPriceChanged();
        partial void OnPurchaseItemAmountChanging(double value);
        partial void OnPurchaseItemAmountChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnPurchaseItemPmOrderChanging(string value);
        partial void OnPurchaseItemPmOrderChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        partial void OnVendorChanging(string value);
        partial void OnVendorChanged();
        #endregion

        public PurchaseItem()
        {
            this._Purchase  = default(EntityRef<Purchase>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemId in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_id", Storage = "_PurchaseItemId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseItemId
        {
            get
            {
                return this._PurchaseItemId;
            }
            set
            {
                if (this._PurchaseItemId != value)
                {
                    this.OnPurchaseItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemId = value;
                    this.SendPropertyChanged("PurchaseItemId");
                    this.OnPurchaseItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    if (this._Purchase.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemSeq in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_seq", Storage = "_PurchaseItemSeq", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseItemSeq
        {
            get
            {
                return this._PurchaseItemSeq;
            }
            set
            {
                if (this._PurchaseItemSeq != value)
                {
                    this.OnPurchaseItemSeqChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemSeq = value;
                    this.SendPropertyChanged("PurchaseItemSeq");
                    this.OnPurchaseItemSeqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemAccode in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_accode", Storage = "_PurchaseItemAccode", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemAccode
        {
            get
            {
                return this._PurchaseItemAccode;
            }
            set
            {
                if (this._PurchaseItemAccode != value)
                {
                    this.OnPurchaseItemAccodeChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemAccode = value;
                    this.SendPropertyChanged("PurchaseItemAccode");
                    this.OnPurchaseItemAccodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemPn in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_pn", Storage = "_PurchaseItemPn", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemPn
        {
            get
            {
                return this._PurchaseItemPn;
            }
            set
            {
                if (this._PurchaseItemPn != value)
                {
                    this.OnPurchaseItemPnChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemPn = value;
                    this.SendPropertyChanged("PurchaseItemPn");
                    this.OnPurchaseItemPnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemService in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_service", Storage = "_PurchaseItemService", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemService
        {
            get
            {
                return this._PurchaseItemService;
            }
            set
            {
                if (this._PurchaseItemService != value)
                {
                    this.OnPurchaseItemServiceChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemService = value;
                    this.SendPropertyChanged("PurchaseItemService");
                    this.OnPurchaseItemServiceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemBrand in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_brand", Storage = "_PurchaseItemBrand", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemBrand
        {
            get
            {
                return this._PurchaseItemBrand;
            }
            set
            {
                if (this._PurchaseItemBrand != value)
                {
                    this.OnPurchaseItemBrandChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemBrand = value;
                    this.SendPropertyChanged("PurchaseItemBrand");
                    this.OnPurchaseItemBrandChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemModel in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_model", Storage = "_PurchaseItemModel", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemModel
        {
            get
            {
                return this._PurchaseItemModel;
            }
            set
            {
                if (this._PurchaseItemModel != value)
                {
                    this.OnPurchaseItemModelChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemModel = value;
                    this.SendPropertyChanged("PurchaseItemModel");
                    this.OnPurchaseItemModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemColor in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_color", Storage = "_PurchaseItemColor", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemColor
        {
            get
            {
                return this._PurchaseItemColor;
            }
            set
            {
                if (this._PurchaseItemColor != value)
                {
                    this.OnPurchaseItemColorChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemColor = value;
                    this.SendPropertyChanged("PurchaseItemColor");
                    this.OnPurchaseItemColorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemQty in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_qty", Storage = "_PurchaseItemQty", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseItemQty
        {
            get
            {
                return this._PurchaseItemQty;
            }
            set
            {
                if (this._PurchaseItemQty != value)
                {
                    this.OnPurchaseItemQtyChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemQty = value;
                    this.SendPropertyChanged("PurchaseItemQty");
                    this.OnPurchaseItemQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemUnit in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_unit", Storage = "_PurchaseItemUnit", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemUnit
        {
            get
            {
                return this._PurchaseItemUnit;
            }
            set
            {
                if (this._PurchaseItemUnit != value)
                {
                    this.OnPurchaseItemUnitChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemUnit = value;
                    this.SendPropertyChanged("PurchaseItemUnit");
                    this.OnPurchaseItemUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemUnitPrice in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_unit_price", Storage = "_PurchaseItemUnitPrice", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseItemUnitPrice
        {
            get
            {
                return this._PurchaseItemUnitPrice;
            }
            set
            {
                if (this._PurchaseItemUnitPrice != value)
                {
                    this.OnPurchaseItemUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemUnitPrice = value;
                    this.SendPropertyChanged("PurchaseItemUnitPrice");
                    this.OnPurchaseItemUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemAmount in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_amount", Storage = "_PurchaseItemAmount", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseItemAmount
        {
            get
            {
                return this._PurchaseItemAmount;
            }
            set
            {
                if (this._PurchaseItemAmount != value)
                {
                    this.OnPurchaseItemAmountChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemAmount = value;
                    this.SendPropertyChanged("PurchaseItemAmount");
                    this.OnPurchaseItemAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemPmOrder in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_pm_order", Storage = "_PurchaseItemPmOrder", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemPmOrder
        {
            get
            {
                return this._PurchaseItemPmOrder;
            }
            set
            {
                if (this._PurchaseItemPmOrder != value)
                {
                    this.OnPurchaseItemPmOrderChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemPmOrder = value;
                    this.SendPropertyChanged("PurchaseItemPmOrder");
                    this.OnPurchaseItemPmOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vendor in the schema.
        /// </summary>
        [Column(Name = @"vendor", Storage = "_Vendor", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Vendor
        {
            get
            {
                return this._Vendor;
            }
            set
            {
                if (this._Vendor != value)
                {
                    this.OnVendorChanging(value);
                    this.SendPropertyChanging();
                    this._Vendor = value;
                    this.SendPropertyChanged("Vendor");
                    this.OnVendorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Purchase in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Purchase_PurchaseItem", Storage="_Purchase", ThisKey="PurchaseId", OtherKey="PurchaseId", IsForeignKey=true)]
        public Purchase Purchase
        {
            get
            {
                return this._Purchase.Entity;
            }
            set
            {
                Purchase previousValue = this._Purchase.Entity;
                if ((previousValue != value) || (this._Purchase.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Purchase.Entity = null;
                        previousValue.PurchaseItems.Remove(this);
                    }
                    this._Purchase.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseId = value.PurchaseId;
                        value.PurchaseItems.Add(this);
                    }
                    else
                    {
                        this._PurchaseId = default(int);
                    }
                    this.SendPropertyChanged("Purchase");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Purchase in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase")]
    public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseId;

        private string _PurchaseNumber;

        private System.DateTime _PurchaseDate;

        private int _PurchaseYear;

        private int _PurchaseMonth;

        private int _PurchaseRunnum;

        private int _PurchaseType;

        private int _PurchaseStatus;

        private string _ApplicantName = @"NULL";

        private string _Section = @"NULL";

        private string _CostCenter = @"NULL";

        private string _PmOrder = @"NULL";

        private System.DateTime _DateOfUse;

        private string _DeliveryTo = @"NULL";

        private string _DeliveryAt = @"NULL";

        private double _Total;

        private double _Vat;

        private double _GrandTotal;

        private int _VatNumber = 7;

        private string _Reason = @"NULL";

        private string _UrgentMachineNumber;

        private int _CancelRejectStatus;

        private int _PurchaseConfirmStatus;

        private System.DateTime _PurchaseConfirmDate;

        private int _PurchaseConfirmBy;

        private int _RequestorConfirmStatus;

        private System.DateTime _RequestorConfirmDate;

        private int _RequestorConfirmBy;

        private int _ReviewConfirmStatus;

        private System.DateTime _ReviewConfirmDate;

        private int _ReviewConfirmBy;

        private int _ApproveConfirmStatus;

        private System.DateTime _ApproveConfirmDate;

        private int _ApproveConfirmBy;

        private System.DateTime _CancelDate;

        private int _CancelBy;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntitySet<PurchaseItem> _PurchaseItems;

        private EntitySet<PurchaseAttachment> _PurchaseAttachments;

        private EntitySet<PurchaseForecastAttachment> _PurchaseForecastAttachments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnPurchaseDateChanging(System.DateTime value);
        partial void OnPurchaseDateChanged();
        partial void OnPurchaseYearChanging(int value);
        partial void OnPurchaseYearChanged();
        partial void OnPurchaseMonthChanging(int value);
        partial void OnPurchaseMonthChanged();
        partial void OnPurchaseRunnumChanging(int value);
        partial void OnPurchaseRunnumChanged();
        partial void OnPurchaseTypeChanging(int value);
        partial void OnPurchaseTypeChanged();
        partial void OnPurchaseStatusChanging(int value);
        partial void OnPurchaseStatusChanged();
        partial void OnApplicantNameChanging(string value);
        partial void OnApplicantNameChanged();
        partial void OnSectionChanging(string value);
        partial void OnSectionChanged();
        partial void OnCostCenterChanging(string value);
        partial void OnCostCenterChanged();
        partial void OnPmOrderChanging(string value);
        partial void OnPmOrderChanged();
        partial void OnDateOfUseChanging(System.DateTime value);
        partial void OnDateOfUseChanged();
        partial void OnDeliveryToChanging(string value);
        partial void OnDeliveryToChanged();
        partial void OnDeliveryAtChanging(string value);
        partial void OnDeliveryAtChanged();
        partial void OnTotalChanging(double value);
        partial void OnTotalChanged();
        partial void OnVatChanging(double value);
        partial void OnVatChanged();
        partial void OnGrandTotalChanging(double value);
        partial void OnGrandTotalChanged();
        partial void OnVatNumberChanging(int value);
        partial void OnVatNumberChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnUrgentMachineNumberChanging(string value);
        partial void OnUrgentMachineNumberChanged();
        partial void OnCancelRejectStatusChanging(int value);
        partial void OnCancelRejectStatusChanged();
        partial void OnPurchaseConfirmStatusChanging(int value);
        partial void OnPurchaseConfirmStatusChanged();
        partial void OnPurchaseConfirmDateChanging(System.DateTime value);
        partial void OnPurchaseConfirmDateChanged();
        partial void OnPurchaseConfirmByChanging(int value);
        partial void OnPurchaseConfirmByChanged();
        partial void OnRequestorConfirmStatusChanging(int value);
        partial void OnRequestorConfirmStatusChanged();
        partial void OnRequestorConfirmDateChanging(System.DateTime value);
        partial void OnRequestorConfirmDateChanged();
        partial void OnRequestorConfirmByChanging(int value);
        partial void OnRequestorConfirmByChanged();
        partial void OnReviewConfirmStatusChanging(int value);
        partial void OnReviewConfirmStatusChanged();
        partial void OnReviewConfirmDateChanging(System.DateTime value);
        partial void OnReviewConfirmDateChanged();
        partial void OnReviewConfirmByChanging(int value);
        partial void OnReviewConfirmByChanged();
        partial void OnApproveConfirmStatusChanging(int value);
        partial void OnApproveConfirmStatusChanged();
        partial void OnApproveConfirmDateChanging(System.DateTime value);
        partial void OnApproveConfirmDateChanged();
        partial void OnApproveConfirmByChanging(int value);
        partial void OnApproveConfirmByChanged();
        partial void OnCancelDateChanging(System.DateTime value);
        partial void OnCancelDateChanged();
        partial void OnCancelByChanging(int value);
        partial void OnCancelByChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Purchase()
        {
            this._PurchaseItems = new EntitySet<PurchaseItem>(new Action<PurchaseItem>(this.attach_PurchaseItems), new Action<PurchaseItem>(this.detach_PurchaseItems));
            this._PurchaseAttachments = new EntitySet<PurchaseAttachment>(new Action<PurchaseAttachment>(this.attach_PurchaseAttachments), new Action<PurchaseAttachment>(this.detach_PurchaseAttachments));
            this._PurchaseForecastAttachments = new EntitySet<PurchaseForecastAttachment>(new Action<PurchaseForecastAttachment>(this.attach_PurchaseForecastAttachments), new Action<PurchaseForecastAttachment>(this.detach_PurchaseForecastAttachments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDate in the schema.
        /// </summary>
        [Column(Name = @"purchase_date", Storage = "_PurchaseDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PurchaseDate
        {
            get
            {
                return this._PurchaseDate;
            }
            set
            {
                if (this._PurchaseDate != value)
                {
                    this.OnPurchaseDateChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseDate = value;
                    this.SendPropertyChanged("PurchaseDate");
                    this.OnPurchaseDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseYear in the schema.
        /// </summary>
        [Column(Name = @"purchase_year", Storage = "_PurchaseYear", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseYear
        {
            get
            {
                return this._PurchaseYear;
            }
            set
            {
                if (this._PurchaseYear != value)
                {
                    this.OnPurchaseYearChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseYear = value;
                    this.SendPropertyChanged("PurchaseYear");
                    this.OnPurchaseYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseMonth in the schema.
        /// </summary>
        [Column(Name = @"purchase_month", Storage = "_PurchaseMonth", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseMonth
        {
            get
            {
                return this._PurchaseMonth;
            }
            set
            {
                if (this._PurchaseMonth != value)
                {
                    this.OnPurchaseMonthChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseMonth = value;
                    this.SendPropertyChanged("PurchaseMonth");
                    this.OnPurchaseMonthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseRunnum in the schema.
        /// </summary>
        [Column(Name = @"purchase_runnum", Storage = "_PurchaseRunnum", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseRunnum
        {
            get
            {
                return this._PurchaseRunnum;
            }
            set
            {
                if (this._PurchaseRunnum != value)
                {
                    this.OnPurchaseRunnumChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseRunnum = value;
                    this.SendPropertyChanged("PurchaseRunnum");
                    this.OnPurchaseRunnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseType in the schema.
        /// </summary>
        [Column(Name = @"purchase_type", Storage = "_PurchaseType", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseType
        {
            get
            {
                return this._PurchaseType;
            }
            set
            {
                if (this._PurchaseType != value)
                {
                    this.OnPurchaseTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseType = value;
                    this.SendPropertyChanged("PurchaseType");
                    this.OnPurchaseTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseStatus in the schema.
        /// </summary>
        [Column(Name = @"purchase_status", Storage = "_PurchaseStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseStatus
        {
            get
            {
                return this._PurchaseStatus;
            }
            set
            {
                if (this._PurchaseStatus != value)
                {
                    this.OnPurchaseStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseStatus = value;
                    this.SendPropertyChanged("PurchaseStatus");
                    this.OnPurchaseStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApplicantName in the schema.
        /// </summary>
        [Column(Name = @"applicant_name", Storage = "_ApplicantName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApplicantName
        {
            get
            {
                return this._ApplicantName;
            }
            set
            {
                if (this._ApplicantName != value)
                {
                    this.OnApplicantNameChanging(value);
                    this.SendPropertyChanging();
                    this._ApplicantName = value;
                    this.SendPropertyChanged("ApplicantName");
                    this.OnApplicantNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Section in the schema.
        /// </summary>
        [Column(Name = @"section", Storage = "_Section", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Section
        {
            get
            {
                return this._Section;
            }
            set
            {
                if (this._Section != value)
                {
                    this.OnSectionChanging(value);
                    this.SendPropertyChanging();
                    this._Section = value;
                    this.SendPropertyChanged("Section");
                    this.OnSectionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CostCenter in the schema.
        /// </summary>
        [Column(Name = @"cost_center", Storage = "_CostCenter", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CostCenter
        {
            get
            {
                return this._CostCenter;
            }
            set
            {
                if (this._CostCenter != value)
                {
                    this.OnCostCenterChanging(value);
                    this.SendPropertyChanging();
                    this._CostCenter = value;
                    this.SendPropertyChanged("CostCenter");
                    this.OnCostCenterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PmOrder in the schema.
        /// </summary>
        [Column(Name = @"pm_order", Storage = "_PmOrder", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PmOrder
        {
            get
            {
                return this._PmOrder;
            }
            set
            {
                if (this._PmOrder != value)
                {
                    this.OnPmOrderChanging(value);
                    this.SendPropertyChanging();
                    this._PmOrder = value;
                    this.SendPropertyChanged("PmOrder");
                    this.OnPmOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateOfUse in the schema.
        /// </summary>
        [Column(Name = @"date_of_use", Storage = "_DateOfUse", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateOfUse
        {
            get
            {
                return this._DateOfUse;
            }
            set
            {
                if (this._DateOfUse != value)
                {
                    this.OnDateOfUseChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfUse = value;
                    this.SendPropertyChanged("DateOfUse");
                    this.OnDateOfUseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryTo in the schema.
        /// </summary>
        [Column(Name = @"delivery_to", Storage = "_DeliveryTo", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryTo
        {
            get
            {
                return this._DeliveryTo;
            }
            set
            {
                if (this._DeliveryTo != value)
                {
                    this.OnDeliveryToChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryTo = value;
                    this.SendPropertyChanged("DeliveryTo");
                    this.OnDeliveryToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryAt in the schema.
        /// </summary>
        [Column(Name = @"delivery_at", Storage = "_DeliveryAt", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryAt
        {
            get
            {
                return this._DeliveryAt;
            }
            set
            {
                if (this._DeliveryAt != value)
                {
                    this.OnDeliveryAtChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryAt = value;
                    this.SendPropertyChanged("DeliveryAt");
                    this.OnDeliveryAtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Name = @"total", Storage = "_Total", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging();
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vat in the schema.
        /// </summary>
        [Column(Name = @"vat", Storage = "_Vat", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Vat
        {
            get
            {
                return this._Vat;
            }
            set
            {
                if (this._Vat != value)
                {
                    this.OnVatChanging(value);
                    this.SendPropertyChanging();
                    this._Vat = value;
                    this.SendPropertyChanged("Vat");
                    this.OnVatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GrandTotal in the schema.
        /// </summary>
        [Column(Name = @"grand_total", Storage = "_GrandTotal", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double GrandTotal
        {
            get
            {
                return this._GrandTotal;
            }
            set
            {
                if (this._GrandTotal != value)
                {
                    this.OnGrandTotalChanging(value);
                    this.SendPropertyChanging();
                    this._GrandTotal = value;
                    this.SendPropertyChanged("GrandTotal");
                    this.OnGrandTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatNumber in the schema.
        /// </summary>
        [Column(Name = @"vat_number", Storage = "_VatNumber", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VatNumber
        {
            get
            {
                return this._VatNumber;
            }
            set
            {
                if (this._VatNumber != value)
                {
                    this.OnVatNumberChanging(value);
                    this.SendPropertyChanging();
                    this._VatNumber = value;
                    this.SendPropertyChanged("VatNumber");
                    this.OnVatNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reason in the schema.
        /// </summary>
        [Column(Name = @"reason", Storage = "_Reason", DbType = "VARCHAR(1000) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UrgentMachineNumber in the schema.
        /// </summary>
        [Column(Name = @"urgent_machine_number", Storage = "_UrgentMachineNumber", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UrgentMachineNumber
        {
            get
            {
                return this._UrgentMachineNumber;
            }
            set
            {
                if (this._UrgentMachineNumber != value)
                {
                    this.OnUrgentMachineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._UrgentMachineNumber = value;
                    this.SendPropertyChanged("UrgentMachineNumber");
                    this.OnUrgentMachineNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelRejectStatus in the schema.
        /// </summary>
        [Column(Name = @"cancel_reject_status", Storage = "_CancelRejectStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CancelRejectStatus
        {
            get
            {
                return this._CancelRejectStatus;
            }
            set
            {
                if (this._CancelRejectStatus != value)
                {
                    this.OnCancelRejectStatusChanging(value);
                    this.SendPropertyChanging();
                    this._CancelRejectStatus = value;
                    this.SendPropertyChanged("CancelRejectStatus");
                    this.OnCancelRejectStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"purchase_confirm_status", Storage = "_PurchaseConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseConfirmStatus
        {
            get
            {
                return this._PurchaseConfirmStatus;
            }
            set
            {
                if (this._PurchaseConfirmStatus != value)
                {
                    this.OnPurchaseConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseConfirmStatus = value;
                    this.SendPropertyChanged("PurchaseConfirmStatus");
                    this.OnPurchaseConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"purchase_confirm_date", Storage = "_PurchaseConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PurchaseConfirmDate
        {
            get
            {
                return this._PurchaseConfirmDate;
            }
            set
            {
                if (this._PurchaseConfirmDate != value)
                {
                    this.OnPurchaseConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseConfirmDate = value;
                    this.SendPropertyChanged("PurchaseConfirmDate");
                    this.OnPurchaseConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"purchase_confirm_by", Storage = "_PurchaseConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseConfirmBy
        {
            get
            {
                return this._PurchaseConfirmBy;
            }
            set
            {
                if (this._PurchaseConfirmBy != value)
                {
                    this.OnPurchaseConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseConfirmBy = value;
                    this.SendPropertyChanged("PurchaseConfirmBy");
                    this.OnPurchaseConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestorConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"requestor_confirm_status", Storage = "_RequestorConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RequestorConfirmStatus
        {
            get
            {
                return this._RequestorConfirmStatus;
            }
            set
            {
                if (this._RequestorConfirmStatus != value)
                {
                    this.OnRequestorConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._RequestorConfirmStatus = value;
                    this.SendPropertyChanged("RequestorConfirmStatus");
                    this.OnRequestorConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestorConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"requestor_confirm_date", Storage = "_RequestorConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime RequestorConfirmDate
        {
            get
            {
                return this._RequestorConfirmDate;
            }
            set
            {
                if (this._RequestorConfirmDate != value)
                {
                    this.OnRequestorConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._RequestorConfirmDate = value;
                    this.SendPropertyChanged("RequestorConfirmDate");
                    this.OnRequestorConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestorConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"requestor_confirm_by", Storage = "_RequestorConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RequestorConfirmBy
        {
            get
            {
                return this._RequestorConfirmBy;
            }
            set
            {
                if (this._RequestorConfirmBy != value)
                {
                    this.OnRequestorConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._RequestorConfirmBy = value;
                    this.SendPropertyChanged("RequestorConfirmBy");
                    this.OnRequestorConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"review_confirm_status", Storage = "_ReviewConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewConfirmStatus
        {
            get
            {
                return this._ReviewConfirmStatus;
            }
            set
            {
                if (this._ReviewConfirmStatus != value)
                {
                    this.OnReviewConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewConfirmStatus = value;
                    this.SendPropertyChanged("ReviewConfirmStatus");
                    this.OnReviewConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"review_confirm_date", Storage = "_ReviewConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ReviewConfirmDate
        {
            get
            {
                return this._ReviewConfirmDate;
            }
            set
            {
                if (this._ReviewConfirmDate != value)
                {
                    this.OnReviewConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewConfirmDate = value;
                    this.SendPropertyChanged("ReviewConfirmDate");
                    this.OnReviewConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"review_confirm_by", Storage = "_ReviewConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewConfirmBy
        {
            get
            {
                return this._ReviewConfirmBy;
            }
            set
            {
                if (this._ReviewConfirmBy != value)
                {
                    this.OnReviewConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewConfirmBy = value;
                    this.SendPropertyChanged("ReviewConfirmBy");
                    this.OnReviewConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"approve_confirm_status", Storage = "_ApproveConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproveConfirmStatus
        {
            get
            {
                return this._ApproveConfirmStatus;
            }
            set
            {
                if (this._ApproveConfirmStatus != value)
                {
                    this.OnApproveConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveConfirmStatus = value;
                    this.SendPropertyChanged("ApproveConfirmStatus");
                    this.OnApproveConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"approve_confirm_date", Storage = "_ApproveConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ApproveConfirmDate
        {
            get
            {
                return this._ApproveConfirmDate;
            }
            set
            {
                if (this._ApproveConfirmDate != value)
                {
                    this.OnApproveConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveConfirmDate = value;
                    this.SendPropertyChanged("ApproveConfirmDate");
                    this.OnApproveConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"approve_confirm_by", Storage = "_ApproveConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproveConfirmBy
        {
            get
            {
                return this._ApproveConfirmBy;
            }
            set
            {
                if (this._ApproveConfirmBy != value)
                {
                    this.OnApproveConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveConfirmBy = value;
                    this.SendPropertyChanged("ApproveConfirmBy");
                    this.OnApproveConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelDate in the schema.
        /// </summary>
        [Column(Name = @"cancel_date", Storage = "_CancelDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CancelDate
        {
            get
            {
                return this._CancelDate;
            }
            set
            {
                if (this._CancelDate != value)
                {
                    this.OnCancelDateChanging(value);
                    this.SendPropertyChanging();
                    this._CancelDate = value;
                    this.SendPropertyChanged("CancelDate");
                    this.OnCancelDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelBy in the schema.
        /// </summary>
        [Column(Name = @"cancel_by", Storage = "_CancelBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CancelBy
        {
            get
            {
                return this._CancelBy;
            }
            set
            {
                if (this._CancelBy != value)
                {
                    this.OnCancelByChanging(value);
                    this.SendPropertyChanging();
                    this._CancelBy = value;
                    this.SendPropertyChanged("CancelBy");
                    this.OnCancelByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItems in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Purchase_PurchaseItem", Storage="_PurchaseItems", ThisKey="PurchaseId", OtherKey="PurchaseId", DeleteRule="RESTRICT")]
        public EntitySet<PurchaseItem> PurchaseItems
        {
            get
            {
                return this._PurchaseItems;
            }
            set
            {
                this._PurchaseItems.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseAttachments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Purchase_PurchaseAttachment", Storage="_PurchaseAttachments", ThisKey="PurchaseId", OtherKey="PurchaseId", DeleteRule="RESTRICT")]
        public EntitySet<PurchaseAttachment> PurchaseAttachments
        {
            get
            {
                return this._PurchaseAttachments;
            }
            set
            {
                this._PurchaseAttachments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseForecastAttachments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Purchase_PurchaseForecastAttachment", Storage="_PurchaseForecastAttachments", ThisKey="PurchaseId", OtherKey="PurchaseId", DeleteRule="RESTRICT")]
        public EntitySet<PurchaseForecastAttachment> PurchaseForecastAttachments
        {
            get
            {
                return this._PurchaseForecastAttachments;
            }
            set
            {
                this._PurchaseForecastAttachments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PurchaseItems(PurchaseItem entity)
        {
            this.SendPropertyChanging("PurchaseItems");
            entity.Purchase = this;
        }
    
        private void detach_PurchaseItems(PurchaseItem entity)
        {
            this.SendPropertyChanging("PurchaseItems");
            entity.Purchase = null;
        }

        private void attach_PurchaseAttachments(PurchaseAttachment entity)
        {
            this.SendPropertyChanging("PurchaseAttachments");
            entity.Purchase = this;
        }
    
        private void detach_PurchaseAttachments(PurchaseAttachment entity)
        {
            this.SendPropertyChanging("PurchaseAttachments");
            entity.Purchase = null;
        }

        private void attach_PurchaseForecastAttachments(PurchaseForecastAttachment entity)
        {
            this.SendPropertyChanging("PurchaseForecastAttachments");
            entity.Purchase = this;
        }
    
        private void detach_PurchaseForecastAttachments(PurchaseForecastAttachment entity)
        {
            this.SendPropertyChanging("PurchaseForecastAttachments");
            entity.Purchase = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Product in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductId;

        private string _AccountCode;

        private string _PartNumber;

        private string _GoodsOrServices;

        private string _Brand;

        private string _Model;

        private string _Color;

        private string _Unit;

        private double _UnitPrice = 0;

        private string _Vendor;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnAccountCodeChanging(string value);
        partial void OnAccountCodeChanged();
        partial void OnPartNumberChanging(string value);
        partial void OnPartNumberChanged();
        partial void OnGoodsOrServicesChanging(string value);
        partial void OnGoodsOrServicesChanged();
        partial void OnBrandChanging(string value);
        partial void OnBrandChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        partial void OnUnitPriceChanging(double value);
        partial void OnUnitPriceChanged();
        partial void OnVendorChanging(string value);
        partial void OnVendorChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Product()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"product_id", Storage = "_ProductId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountCode in the schema.
        /// </summary>
        [Column(Name = @"account_code", Storage = "_AccountCode", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountCode
        {
            get
            {
                return this._AccountCode;
            }
            set
            {
                if (this._AccountCode != value)
                {
                    this.OnAccountCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AccountCode = value;
                    this.SendPropertyChanged("AccountCode");
                    this.OnAccountCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartNumber in the schema.
        /// </summary>
        [Column(Name = @"part_number", Storage = "_PartNumber", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PartNumber
        {
            get
            {
                return this._PartNumber;
            }
            set
            {
                if (this._PartNumber != value)
                {
                    this.OnPartNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PartNumber = value;
                    this.SendPropertyChanged("PartNumber");
                    this.OnPartNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsOrServices in the schema.
        /// </summary>
        [Column(Name = @"goods_or_services", Storage = "_GoodsOrServices", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GoodsOrServices
        {
            get
            {
                return this._GoodsOrServices;
            }
            set
            {
                if (this._GoodsOrServices != value)
                {
                    this.OnGoodsOrServicesChanging(value);
                    this.SendPropertyChanging();
                    this._GoodsOrServices = value;
                    this.SendPropertyChanged("GoodsOrServices");
                    this.OnGoodsOrServicesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Brand in the schema.
        /// </summary>
        [Column(Name = @"brand", Storage = "_Brand", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Brand
        {
            get
            {
                return this._Brand;
            }
            set
            {
                if (this._Brand != value)
                {
                    this.OnBrandChanging(value);
                    this.SendPropertyChanging();
                    this._Brand = value;
                    this.SendPropertyChanged("Brand");
                    this.OnBrandChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Name = @"model", Storage = "_Model", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Color in the schema.
        /// </summary>
        [Column(Name = @"color", Storage = "_Color", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging();
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitPrice in the schema.
        /// </summary>
        [Column(Name = @"unit_price", Storage = "_UnitPrice", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vendor in the schema.
        /// </summary>
        [Column(Name = @"vendor", Storage = "_Vendor", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Vendor
        {
            get
            {
                return this._Vendor;
            }
            set
            {
                if (this._Vendor != value)
                {
                    this.OnVendorChanging(value);
                    this.SendPropertyChanging();
                    this._Vendor = value;
                    this.SendPropertyChanged("Vendor");
                    this.OnVendorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserApprover in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_approver")]
    public partial class UserApprover : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserApproverId;

        private int _UserAccountId;

        private int _ApproverId;

        private System.Nullable<int> _Approver2Id;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserApproverIdChanging(int value);
        partial void OnUserApproverIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnApproverIdChanging(int value);
        partial void OnApproverIdChanged();
        partial void OnApprover2IdChanging(System.Nullable<int> value);
        partial void OnApprover2IdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserApprover()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserApproverId in the schema.
        /// </summary>
        [Column(Name = @"user_approver_id", Storage = "_UserApproverId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserApproverId
        {
            get
            {
                return this._UserApproverId;
            }
            set
            {
                if (this._UserApproverId != value)
                {
                    this.OnUserApproverIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserApproverId = value;
                    this.SendPropertyChanged("UserApproverId");
                    this.OnUserApproverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproverId in the schema.
        /// </summary>
        [Column(Name = @"approver_id", Storage = "_ApproverId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproverId
        {
            get
            {
                return this._ApproverId;
            }
            set
            {
                if (this._ApproverId != value)
                {
                    this.OnApproverIdChanging(value);
                    this.SendPropertyChanging();
                    this._ApproverId = value;
                    this.SendPropertyChanged("ApproverId");
                    this.OnApproverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver2Id in the schema.
        /// </summary>
        [Column(Name = @"approver2_id", Storage = "_Approver2Id", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Approver2Id
        {
            get
            {
                return this._Approver2Id;
            }
            set
            {
                if (this._Approver2Id != value)
                {
                    this.OnApprover2IdChanging(value);
                    this.SendPropertyChanging();
                    this._Approver2Id = value;
                    this.SendPropertyChanged("Approver2Id");
                    this.OnApprover2IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserPurchase in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_purchase")]
    public partial class UserPurchase : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserPurchaseId;

        private int _UserAccountId;

        private int _PurchaseId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserPurchaseIdChanging(int value);
        partial void OnUserPurchaseIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserPurchase()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserPurchaseId in the schema.
        /// </summary>
        [Column(Name = @"user_purchase_id", Storage = "_UserPurchaseId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserPurchaseId
        {
            get
            {
                return this._UserPurchaseId;
            }
            set
            {
                if (this._UserPurchaseId != value)
                {
                    this.OnUserPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserPurchaseId = value;
                    this.SendPropertyChanged("UserPurchaseId");
                    this.OnUserPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserReviewer in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_reviewer")]
    public partial class UserReviewer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserReviewerId;

        private int _UserAccountId;

        private int _ReviewerId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserReviewerIdChanging(int value);
        partial void OnUserReviewerIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnReviewerIdChanging(int value);
        partial void OnReviewerIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserReviewer()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserReviewerId in the schema.
        /// </summary>
        [Column(Name = @"user_reviewer_id", Storage = "_UserReviewerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserReviewerId
        {
            get
            {
                return this._UserReviewerId;
            }
            set
            {
                if (this._UserReviewerId != value)
                {
                    this.OnUserReviewerIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserReviewerId = value;
                    this.SendPropertyChanged("UserReviewerId");
                    this.OnUserReviewerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewerId in the schema.
        /// </summary>
        [Column(Name = @"reviewer_id", Storage = "_ReviewerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewerId
        {
            get
            {
                return this._ReviewerId;
            }
            set
            {
                if (this._ReviewerId != value)
                {
                    this.OnReviewerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewerId = value;
                    this.SendPropertyChanged("ReviewerId");
                    this.OnReviewerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Email in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.email")]
    public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmailId;

        private string _ToEmailAddress;

        private string _CcEmailAddress = @"";

        private string _BccEmailAddress = @"";

        private string _FromEmailAddress;

        private int _EmailStatusFlag;

        private string _Subject;

        private string _AttachmentPath = @"";

        private string _Body;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmailIdChanging(int value);
        partial void OnEmailIdChanged();
        partial void OnToEmailAddressChanging(string value);
        partial void OnToEmailAddressChanged();
        partial void OnCcEmailAddressChanging(string value);
        partial void OnCcEmailAddressChanged();
        partial void OnBccEmailAddressChanging(string value);
        partial void OnBccEmailAddressChanged();
        partial void OnFromEmailAddressChanging(string value);
        partial void OnFromEmailAddressChanged();
        partial void OnEmailStatusFlagChanging(int value);
        partial void OnEmailStatusFlagChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnAttachmentPathChanging(string value);
        partial void OnAttachmentPathChanged();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Email()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmailId in the schema.
        /// </summary>
        [Column(Name = @"email_id", Storage = "_EmailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmailId
        {
            get
            {
                return this._EmailId;
            }
            set
            {
                if (this._EmailId != value)
                {
                    this.OnEmailIdChanging(value);
                    this.SendPropertyChanging();
                    this._EmailId = value;
                    this.SendPropertyChanged("EmailId");
                    this.OnEmailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"to_email_address", Storage = "_ToEmailAddress", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToEmailAddress
        {
            get
            {
                return this._ToEmailAddress;
            }
            set
            {
                if (this._ToEmailAddress != value)
                {
                    this.OnToEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._ToEmailAddress = value;
                    this.SendPropertyChanged("ToEmailAddress");
                    this.OnToEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CcEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"cc_email_address", Storage = "_CcEmailAddress", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CcEmailAddress
        {
            get
            {
                return this._CcEmailAddress;
            }
            set
            {
                if (this._CcEmailAddress != value)
                {
                    this.OnCcEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._CcEmailAddress = value;
                    this.SendPropertyChanged("CcEmailAddress");
                    this.OnCcEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BccEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"bcc_email_address", Storage = "_BccEmailAddress", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BccEmailAddress
        {
            get
            {
                return this._BccEmailAddress;
            }
            set
            {
                if (this._BccEmailAddress != value)
                {
                    this.OnBccEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._BccEmailAddress = value;
                    this.SendPropertyChanged("BccEmailAddress");
                    this.OnBccEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"from_email_address", Storage = "_FromEmailAddress", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FromEmailAddress
        {
            get
            {
                return this._FromEmailAddress;
            }
            set
            {
                if (this._FromEmailAddress != value)
                {
                    this.OnFromEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._FromEmailAddress = value;
                    this.SendPropertyChanged("FromEmailAddress");
                    this.OnFromEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailStatusFlag in the schema.
        /// </summary>
        [Column(Name = @"email_status_flag", Storage = "_EmailStatusFlag", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int EmailStatusFlag
        {
            get
            {
                return this._EmailStatusFlag;
            }
            set
            {
                if (this._EmailStatusFlag != value)
                {
                    this.OnEmailStatusFlagChanging(value);
                    this.SendPropertyChanging();
                    this._EmailStatusFlag = value;
                    this.SendPropertyChanged("EmailStatusFlag");
                    this.OnEmailStatusFlagChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subject in the schema.
        /// </summary>
        [Column(Name = @"subject", Storage = "_Subject", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AttachmentPath in the schema.
        /// </summary>
        [Column(Name = @"attachment_path", Storage = "_AttachmentPath", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AttachmentPath
        {
            get
            {
                return this._AttachmentPath;
            }
            set
            {
                if (this._AttachmentPath != value)
                {
                    this.OnAttachmentPathChanging(value);
                    this.SendPropertyChanging();
                    this._AttachmentPath = value;
                    this.SendPropertyChanged("AttachmentPath");
                    this.OnAttachmentPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Body in the schema.
        /// </summary>
        [Column(Name = @"body", Storage = "_Body", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Body
        {
            get
            {
                return this._Body;
            }
            set
            {
                if (this._Body != value)
                {
                    this.OnBodyChanging(value);
                    this.SendPropertyChanging();
                    this._Body = value;
                    this.SendPropertyChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseTodo in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_todo")]
    public partial class PurchaseTodo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseTodoId;

        private int _UserAccountId;

        private int _PurchaseId;

        private int _PurchaseTodoStatus;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseTodoIdChanging(int value);
        partial void OnPurchaseTodoIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnPurchaseTodoStatusChanging(int value);
        partial void OnPurchaseTodoStatusChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseTodo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseTodoId in the schema.
        /// </summary>
        [Column(Name = @"purchase_todo_id", Storage = "_PurchaseTodoId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseTodoId
        {
            get
            {
                return this._PurchaseTodoId;
            }
            set
            {
                if (this._PurchaseTodoId != value)
                {
                    this.OnPurchaseTodoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseTodoId = value;
                    this.SendPropertyChanged("PurchaseTodoId");
                    this.OnPurchaseTodoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseTodoStatus in the schema.
        /// </summary>
        [Column(Name = @"purchase_todo_status", Storage = "_PurchaseTodoStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseTodoStatus
        {
            get
            {
                return this._PurchaseTodoStatus;
            }
            set
            {
                if (this._PurchaseTodoStatus != value)
                {
                    this.OnPurchaseTodoStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseTodoStatus = value;
                    this.SendPropertyChanged("PurchaseTodoStatus");
                    this.OnPurchaseTodoStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseOrder in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_order")]
    public partial class PurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseOrderId;

        private string _PurchaseOrderNumber;

        private System.DateTime _PurchaseOrderDate;

        private int _PurchaseOrderYear;

        private int _PurchaseOrderMonth;

        private int _PurchaseOrderRunnum;

        private int _PurchaseOrderStatus;

        private string _VendorCode = @"NULL";

        private string _VendorName = @"NULL";

        private string _VendorAddress = @"NULL";

        private string _VendorTel = @"NULL";

        private string _VendorFax = @"NULL";

        private System.DateTime _DeliveryDate;

        private int _TermPayment;

        private string _PayBy = @"NULL";

        private string _PurchaseNumber;

        private string _DeliveryTo;

        private string _AttnTo;

        private string _Remark;

        private double _Total;

        private double _Vat;

        private double _GrandTotal;

        private int _VatNumber = 7;

        private int _CancelRejectStatus;

        private int _ReviewConfirmStatus;

        private System.DateTime _ReviewConfirmDate;

        private int _ReviewConfirmBy;

        private int _ApproveConfirmStatus;

        private System.DateTime _ApproveConfirmDate;

        private int _ApproveConfirmBy;

        private string _ToEmailAddress = @"";

        private string _CcEmailAddress = @"";

        private string _AttachmentPath = @"";

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntitySet<PurchaseOrderItem> _PurchaseOrderItems;

        private EntitySet<PurchaseOrderAttachment> _PurchaseOrderAttachments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderIdChanging(int value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderNumberChanging(string value);
        partial void OnPurchaseOrderNumberChanged();
        partial void OnPurchaseOrderDateChanging(System.DateTime value);
        partial void OnPurchaseOrderDateChanged();
        partial void OnPurchaseOrderYearChanging(int value);
        partial void OnPurchaseOrderYearChanged();
        partial void OnPurchaseOrderMonthChanging(int value);
        partial void OnPurchaseOrderMonthChanged();
        partial void OnPurchaseOrderRunnumChanging(int value);
        partial void OnPurchaseOrderRunnumChanged();
        partial void OnPurchaseOrderStatusChanging(int value);
        partial void OnPurchaseOrderStatusChanged();
        partial void OnVendorCodeChanging(string value);
        partial void OnVendorCodeChanged();
        partial void OnVendorNameChanging(string value);
        partial void OnVendorNameChanged();
        partial void OnVendorAddressChanging(string value);
        partial void OnVendorAddressChanged();
        partial void OnVendorTelChanging(string value);
        partial void OnVendorTelChanged();
        partial void OnVendorFaxChanging(string value);
        partial void OnVendorFaxChanged();
        partial void OnDeliveryDateChanging(System.DateTime value);
        partial void OnDeliveryDateChanged();
        partial void OnTermPaymentChanging(int value);
        partial void OnTermPaymentChanged();
        partial void OnPayByChanging(string value);
        partial void OnPayByChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnDeliveryToChanging(string value);
        partial void OnDeliveryToChanged();
        partial void OnAttnToChanging(string value);
        partial void OnAttnToChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnTotalChanging(double value);
        partial void OnTotalChanged();
        partial void OnVatChanging(double value);
        partial void OnVatChanged();
        partial void OnGrandTotalChanging(double value);
        partial void OnGrandTotalChanged();
        partial void OnVatNumberChanging(int value);
        partial void OnVatNumberChanged();
        partial void OnCancelRejectStatusChanging(int value);
        partial void OnCancelRejectStatusChanged();
        partial void OnReviewConfirmStatusChanging(int value);
        partial void OnReviewConfirmStatusChanged();
        partial void OnReviewConfirmDateChanging(System.DateTime value);
        partial void OnReviewConfirmDateChanged();
        partial void OnReviewConfirmByChanging(int value);
        partial void OnReviewConfirmByChanged();
        partial void OnApproveConfirmStatusChanging(int value);
        partial void OnApproveConfirmStatusChanged();
        partial void OnApproveConfirmDateChanging(System.DateTime value);
        partial void OnApproveConfirmDateChanged();
        partial void OnApproveConfirmByChanging(int value);
        partial void OnApproveConfirmByChanged();
        partial void OnToEmailAddressChanging(string value);
        partial void OnToEmailAddressChanged();
        partial void OnCcEmailAddressChanging(string value);
        partial void OnCcEmailAddressChanged();
        partial void OnAttachmentPathChanging(string value);
        partial void OnAttachmentPathChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseOrder()
        {
            this._PurchaseOrderItems = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItems), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItems));
            this._PurchaseOrderAttachments = new EntitySet<PurchaseOrderAttachment>(new Action<PurchaseOrderAttachment>(this.attach_PurchaseOrderAttachments), new Action<PurchaseOrderAttachment>(this.detach_PurchaseOrderAttachments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_id", Storage = "_PurchaseOrderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_number", Storage = "_PurchaseOrderNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._PurchaseOrderNumber;
            }
            set
            {
                if (this._PurchaseOrderNumber != value)
                {
                    this.OnPurchaseOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderNumber = value;
                    this.SendPropertyChanged("PurchaseOrderNumber");
                    this.OnPurchaseOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderDate in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_date", Storage = "_PurchaseOrderDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PurchaseOrderDate
        {
            get
            {
                return this._PurchaseOrderDate;
            }
            set
            {
                if (this._PurchaseOrderDate != value)
                {
                    this.OnPurchaseOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderDate = value;
                    this.SendPropertyChanged("PurchaseOrderDate");
                    this.OnPurchaseOrderDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderYear in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_year", Storage = "_PurchaseOrderYear", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderYear
        {
            get
            {
                return this._PurchaseOrderYear;
            }
            set
            {
                if (this._PurchaseOrderYear != value)
                {
                    this.OnPurchaseOrderYearChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderYear = value;
                    this.SendPropertyChanged("PurchaseOrderYear");
                    this.OnPurchaseOrderYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderMonth in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_month", Storage = "_PurchaseOrderMonth", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderMonth
        {
            get
            {
                return this._PurchaseOrderMonth;
            }
            set
            {
                if (this._PurchaseOrderMonth != value)
                {
                    this.OnPurchaseOrderMonthChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderMonth = value;
                    this.SendPropertyChanged("PurchaseOrderMonth");
                    this.OnPurchaseOrderMonthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderRunnum in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_runnum", Storage = "_PurchaseOrderRunnum", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderRunnum
        {
            get
            {
                return this._PurchaseOrderRunnum;
            }
            set
            {
                if (this._PurchaseOrderRunnum != value)
                {
                    this.OnPurchaseOrderRunnumChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderRunnum = value;
                    this.SendPropertyChanged("PurchaseOrderRunnum");
                    this.OnPurchaseOrderRunnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderStatus in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_status", Storage = "_PurchaseOrderStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderStatus
        {
            get
            {
                return this._PurchaseOrderStatus;
            }
            set
            {
                if (this._PurchaseOrderStatus != value)
                {
                    this.OnPurchaseOrderStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderStatus = value;
                    this.SendPropertyChanged("PurchaseOrderStatus");
                    this.OnPurchaseOrderStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorCode in the schema.
        /// </summary>
        [Column(Name = @"vendor_code", Storage = "_VendorCode", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorCode
        {
            get
            {
                return this._VendorCode;
            }
            set
            {
                if (this._VendorCode != value)
                {
                    this.OnVendorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._VendorCode = value;
                    this.SendPropertyChanged("VendorCode");
                    this.OnVendorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorName in the schema.
        /// </summary>
        [Column(Name = @"vendor_name", Storage = "_VendorName", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorName
        {
            get
            {
                return this._VendorName;
            }
            set
            {
                if (this._VendorName != value)
                {
                    this.OnVendorNameChanging(value);
                    this.SendPropertyChanging();
                    this._VendorName = value;
                    this.SendPropertyChanged("VendorName");
                    this.OnVendorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorAddress in the schema.
        /// </summary>
        [Column(Name = @"vendor_address", Storage = "_VendorAddress", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorAddress
        {
            get
            {
                return this._VendorAddress;
            }
            set
            {
                if (this._VendorAddress != value)
                {
                    this.OnVendorAddressChanging(value);
                    this.SendPropertyChanging();
                    this._VendorAddress = value;
                    this.SendPropertyChanged("VendorAddress");
                    this.OnVendorAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorTel in the schema.
        /// </summary>
        [Column(Name = @"vendor_tel", Storage = "_VendorTel", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorTel
        {
            get
            {
                return this._VendorTel;
            }
            set
            {
                if (this._VendorTel != value)
                {
                    this.OnVendorTelChanging(value);
                    this.SendPropertyChanging();
                    this._VendorTel = value;
                    this.SendPropertyChanged("VendorTel");
                    this.OnVendorTelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorFax in the schema.
        /// </summary>
        [Column(Name = @"vendor_fax", Storage = "_VendorFax", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorFax
        {
            get
            {
                return this._VendorFax;
            }
            set
            {
                if (this._VendorFax != value)
                {
                    this.OnVendorFaxChanging(value);
                    this.SendPropertyChanging();
                    this._VendorFax = value;
                    this.SendPropertyChanged("VendorFax");
                    this.OnVendorFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryDate in the schema.
        /// </summary>
        [Column(Name = @"delivery_date", Storage = "_DeliveryDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DeliveryDate
        {
            get
            {
                return this._DeliveryDate;
            }
            set
            {
                if (this._DeliveryDate != value)
                {
                    this.OnDeliveryDateChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryDate = value;
                    this.SendPropertyChanged("DeliveryDate");
                    this.OnDeliveryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermPayment in the schema.
        /// </summary>
        [Column(Name = @"term_payment", Storage = "_TermPayment", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TermPayment
        {
            get
            {
                return this._TermPayment;
            }
            set
            {
                if (this._TermPayment != value)
                {
                    this.OnTermPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._TermPayment = value;
                    this.SendPropertyChanged("TermPayment");
                    this.OnTermPaymentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PayBy in the schema.
        /// </summary>
        [Column(Name = @"pay_by", Storage = "_PayBy", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PayBy
        {
            get
            {
                return this._PayBy;
            }
            set
            {
                if (this._PayBy != value)
                {
                    this.OnPayByChanging(value);
                    this.SendPropertyChanging();
                    this._PayBy = value;
                    this.SendPropertyChanged("PayBy");
                    this.OnPayByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryTo in the schema.
        /// </summary>
        [Column(Name = @"delivery_to", Storage = "_DeliveryTo", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryTo
        {
            get
            {
                return this._DeliveryTo;
            }
            set
            {
                if (this._DeliveryTo != value)
                {
                    this.OnDeliveryToChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryTo = value;
                    this.SendPropertyChanged("DeliveryTo");
                    this.OnDeliveryToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AttnTo in the schema.
        /// </summary>
        [Column(Name = @"attn_to", Storage = "_AttnTo", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AttnTo
        {
            get
            {
                return this._AttnTo;
            }
            set
            {
                if (this._AttnTo != value)
                {
                    this.OnAttnToChanging(value);
                    this.SendPropertyChanging();
                    this._AttnTo = value;
                    this.SendPropertyChanged("AttnTo");
                    this.OnAttnToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Name = @"remark", Storage = "_Remark", CanBeNull = false, DbType = "VARCHAR(500) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging();
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        [Column(Name = @"total", Storage = "_Total", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Total
        {
            get
            {
                return this._Total;
            }
            set
            {
                if (this._Total != value)
                {
                    this.OnTotalChanging(value);
                    this.SendPropertyChanging();
                    this._Total = value;
                    this.SendPropertyChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vat in the schema.
        /// </summary>
        [Column(Name = @"vat", Storage = "_Vat", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Vat
        {
            get
            {
                return this._Vat;
            }
            set
            {
                if (this._Vat != value)
                {
                    this.OnVatChanging(value);
                    this.SendPropertyChanging();
                    this._Vat = value;
                    this.SendPropertyChanged("Vat");
                    this.OnVatChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GrandTotal in the schema.
        /// </summary>
        [Column(Name = @"grand_total", Storage = "_GrandTotal", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double GrandTotal
        {
            get
            {
                return this._GrandTotal;
            }
            set
            {
                if (this._GrandTotal != value)
                {
                    this.OnGrandTotalChanging(value);
                    this.SendPropertyChanging();
                    this._GrandTotal = value;
                    this.SendPropertyChanged("GrandTotal");
                    this.OnGrandTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VatNumber in the schema.
        /// </summary>
        [Column(Name = @"vat_number", Storage = "_VatNumber", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VatNumber
        {
            get
            {
                return this._VatNumber;
            }
            set
            {
                if (this._VatNumber != value)
                {
                    this.OnVatNumberChanging(value);
                    this.SendPropertyChanging();
                    this._VatNumber = value;
                    this.SendPropertyChanged("VatNumber");
                    this.OnVatNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelRejectStatus in the schema.
        /// </summary>
        [Column(Name = @"cancel_reject_status", Storage = "_CancelRejectStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CancelRejectStatus
        {
            get
            {
                return this._CancelRejectStatus;
            }
            set
            {
                if (this._CancelRejectStatus != value)
                {
                    this.OnCancelRejectStatusChanging(value);
                    this.SendPropertyChanging();
                    this._CancelRejectStatus = value;
                    this.SendPropertyChanged("CancelRejectStatus");
                    this.OnCancelRejectStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"review_confirm_status", Storage = "_ReviewConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewConfirmStatus
        {
            get
            {
                return this._ReviewConfirmStatus;
            }
            set
            {
                if (this._ReviewConfirmStatus != value)
                {
                    this.OnReviewConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewConfirmStatus = value;
                    this.SendPropertyChanged("ReviewConfirmStatus");
                    this.OnReviewConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"review_confirm_date", Storage = "_ReviewConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ReviewConfirmDate
        {
            get
            {
                return this._ReviewConfirmDate;
            }
            set
            {
                if (this._ReviewConfirmDate != value)
                {
                    this.OnReviewConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewConfirmDate = value;
                    this.SendPropertyChanged("ReviewConfirmDate");
                    this.OnReviewConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"review_confirm_by", Storage = "_ReviewConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewConfirmBy
        {
            get
            {
                return this._ReviewConfirmBy;
            }
            set
            {
                if (this._ReviewConfirmBy != value)
                {
                    this.OnReviewConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewConfirmBy = value;
                    this.SendPropertyChanged("ReviewConfirmBy");
                    this.OnReviewConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"approve_confirm_status", Storage = "_ApproveConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproveConfirmStatus
        {
            get
            {
                return this._ApproveConfirmStatus;
            }
            set
            {
                if (this._ApproveConfirmStatus != value)
                {
                    this.OnApproveConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveConfirmStatus = value;
                    this.SendPropertyChanged("ApproveConfirmStatus");
                    this.OnApproveConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"approve_confirm_date", Storage = "_ApproveConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ApproveConfirmDate
        {
            get
            {
                return this._ApproveConfirmDate;
            }
            set
            {
                if (this._ApproveConfirmDate != value)
                {
                    this.OnApproveConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveConfirmDate = value;
                    this.SendPropertyChanged("ApproveConfirmDate");
                    this.OnApproveConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"approve_confirm_by", Storage = "_ApproveConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproveConfirmBy
        {
            get
            {
                return this._ApproveConfirmBy;
            }
            set
            {
                if (this._ApproveConfirmBy != value)
                {
                    this.OnApproveConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveConfirmBy = value;
                    this.SendPropertyChanged("ApproveConfirmBy");
                    this.OnApproveConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"to_email_address", Storage = "_ToEmailAddress", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToEmailAddress
        {
            get
            {
                return this._ToEmailAddress;
            }
            set
            {
                if (this._ToEmailAddress != value)
                {
                    this.OnToEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._ToEmailAddress = value;
                    this.SendPropertyChanged("ToEmailAddress");
                    this.OnToEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CcEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"cc_email_address", Storage = "_CcEmailAddress", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CcEmailAddress
        {
            get
            {
                return this._CcEmailAddress;
            }
            set
            {
                if (this._CcEmailAddress != value)
                {
                    this.OnCcEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._CcEmailAddress = value;
                    this.SendPropertyChanged("CcEmailAddress");
                    this.OnCcEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AttachmentPath in the schema.
        /// </summary>
        [Column(Name = @"attachment_path", Storage = "_AttachmentPath", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AttachmentPath
        {
            get
            {
                return this._AttachmentPath;
            }
            set
            {
                if (this._AttachmentPath != value)
                {
                    this.OnAttachmentPathChanging(value);
                    this.SendPropertyChanging();
                    this._AttachmentPath = value;
                    this.SendPropertyChanged("AttachmentPath");
                    this.OnAttachmentPathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItems in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrder_PurchaseOrderItem", Storage="_PurchaseOrderItems", ThisKey="PurchaseOrderId", OtherKey="PurchaseOrderId", DeleteRule="RESTRICT")]
        public EntitySet<PurchaseOrderItem> PurchaseOrderItems
        {
            get
            {
                return this._PurchaseOrderItems;
            }
            set
            {
                this._PurchaseOrderItems.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderAttachments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrder_PurchaseOrderAttachment", Storage="_PurchaseOrderAttachments", ThisKey="PurchaseOrderId", OtherKey="PurchaseOrderId", DeleteRule="RESTRICT")]
        public EntitySet<PurchaseOrderAttachment> PurchaseOrderAttachments
        {
            get
            {
                return this._PurchaseOrderAttachments;
            }
            set
            {
                this._PurchaseOrderAttachments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PurchaseOrderItems(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItems");
            entity.PurchaseOrder = this;
        }
    
        private void detach_PurchaseOrderItems(PurchaseOrderItem entity)
        {
            this.SendPropertyChanging("PurchaseOrderItems");
            entity.PurchaseOrder = null;
        }

        private void attach_PurchaseOrderAttachments(PurchaseOrderAttachment entity)
        {
            this.SendPropertyChanging("PurchaseOrderAttachments");
            entity.PurchaseOrder = this;
        }
    
        private void detach_PurchaseOrderAttachments(PurchaseOrderAttachment entity)
        {
            this.SendPropertyChanging("PurchaseOrderAttachments");
            entity.PurchaseOrder = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseOrderItem in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_order_item")]
    public partial class PurchaseOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseOrderItemId;

        private int _PurchaseOrderId;

        private string _PurchaseOrderNumber;

        private int _PurchaseOrderItemSeq;

        private string _PurchaseNumber;

        private string _PurchaseOrderItemDescription;

        private double _PurchaseItemQty;

        private string _PurchaseItemUnit;

        private double _PurchaseItemUnitPrice;

        private double _PurchaseItemAmount;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<PurchaseOrder> _PurchaseOrder;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderItemIdChanging(int value);
        partial void OnPurchaseOrderItemIdChanged();
        partial void OnPurchaseOrderIdChanging(int value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderNumberChanging(string value);
        partial void OnPurchaseOrderNumberChanged();
        partial void OnPurchaseOrderItemSeqChanging(int value);
        partial void OnPurchaseOrderItemSeqChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnPurchaseOrderItemDescriptionChanging(string value);
        partial void OnPurchaseOrderItemDescriptionChanged();
        partial void OnPurchaseItemQtyChanging(double value);
        partial void OnPurchaseItemQtyChanged();
        partial void OnPurchaseItemUnitChanging(string value);
        partial void OnPurchaseItemUnitChanged();
        partial void OnPurchaseItemUnitPriceChanging(double value);
        partial void OnPurchaseItemUnitPriceChanged();
        partial void OnPurchaseItemAmountChanging(double value);
        partial void OnPurchaseItemAmountChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseOrderItem()
        {
            this._PurchaseOrder  = default(EntityRef<PurchaseOrder>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItemId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_item_id", Storage = "_PurchaseOrderItemId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseOrderItemId
        {
            get
            {
                return this._PurchaseOrderItemId;
            }
            set
            {
                if (this._PurchaseOrderItemId != value)
                {
                    this.OnPurchaseOrderItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderItemId = value;
                    this.SendPropertyChanged("PurchaseOrderItemId");
                    this.OnPurchaseOrderItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_id", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    if (this._PurchaseOrder.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_number", Storage = "_PurchaseOrderNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._PurchaseOrderNumber;
            }
            set
            {
                if (this._PurchaseOrderNumber != value)
                {
                    this.OnPurchaseOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderNumber = value;
                    this.SendPropertyChanged("PurchaseOrderNumber");
                    this.OnPurchaseOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItemSeq in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_item_seq", Storage = "_PurchaseOrderItemSeq", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderItemSeq
        {
            get
            {
                return this._PurchaseOrderItemSeq;
            }
            set
            {
                if (this._PurchaseOrderItemSeq != value)
                {
                    this.OnPurchaseOrderItemSeqChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderItemSeq = value;
                    this.SendPropertyChanged("PurchaseOrderItemSeq");
                    this.OnPurchaseOrderItemSeqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItemDescription in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_item_description", Storage = "_PurchaseOrderItemDescription", CanBeNull = false, DbType = "VARCHAR(500) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderItemDescription
        {
            get
            {
                return this._PurchaseOrderItemDescription;
            }
            set
            {
                if (this._PurchaseOrderItemDescription != value)
                {
                    this.OnPurchaseOrderItemDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderItemDescription = value;
                    this.SendPropertyChanged("PurchaseOrderItemDescription");
                    this.OnPurchaseOrderItemDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemQty in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_qty", Storage = "_PurchaseItemQty", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseItemQty
        {
            get
            {
                return this._PurchaseItemQty;
            }
            set
            {
                if (this._PurchaseItemQty != value)
                {
                    this.OnPurchaseItemQtyChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemQty = value;
                    this.SendPropertyChanged("PurchaseItemQty");
                    this.OnPurchaseItemQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemUnit in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_unit", Storage = "_PurchaseItemUnit", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemUnit
        {
            get
            {
                return this._PurchaseItemUnit;
            }
            set
            {
                if (this._PurchaseItemUnit != value)
                {
                    this.OnPurchaseItemUnitChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemUnit = value;
                    this.SendPropertyChanged("PurchaseItemUnit");
                    this.OnPurchaseItemUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemUnitPrice in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_unit_price", Storage = "_PurchaseItemUnitPrice", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseItemUnitPrice
        {
            get
            {
                return this._PurchaseItemUnitPrice;
            }
            set
            {
                if (this._PurchaseItemUnitPrice != value)
                {
                    this.OnPurchaseItemUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemUnitPrice = value;
                    this.SendPropertyChanged("PurchaseItemUnitPrice");
                    this.OnPurchaseItemUnitPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemAmount in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_amount", Storage = "_PurchaseItemAmount", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseItemAmount
        {
            get
            {
                return this._PurchaseItemAmount;
            }
            set
            {
                if (this._PurchaseItemAmount != value)
                {
                    this.OnPurchaseItemAmountChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemAmount = value;
                    this.SendPropertyChanged("PurchaseItemAmount");
                    this.OnPurchaseItemAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrder in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrder_PurchaseOrderItem", Storage="_PurchaseOrder", ThisKey="PurchaseOrderId", OtherKey="PurchaseOrderId", IsForeignKey=true)]
        public PurchaseOrder PurchaseOrder
        {
            get
            {
                return this._PurchaseOrder.Entity;
            }
            set
            {
                PurchaseOrder previousValue = this._PurchaseOrder.Entity;
                if ((previousValue != value) || (this._PurchaseOrder.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PurchaseOrder.Entity = null;
                        previousValue.PurchaseOrderItems.Remove(this);
                    }
                    this._PurchaseOrder.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseOrderId = value.PurchaseOrderId;
                        value.PurchaseOrderItems.Add(this);
                    }
                    else
                    {
                        this._PurchaseOrderId = default(int);
                    }
                    this.SendPropertyChanged("PurchaseOrder");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseAttachment in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_attachment")]
    public partial class PurchaseAttachment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseAttachmentId;

        private int _PurchaseId;

        private string _PurchaseNumber;

        private string _Filename;

        private byte[] _Content;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<Purchase> _Purchase;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseAttachmentIdChanging(int value);
        partial void OnPurchaseAttachmentIdChanged();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseAttachment()
        {
            this._Purchase  = default(EntityRef<Purchase>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseAttachmentId in the schema.
        /// </summary>
        [Column(Name = @"purchase_attachment_id", Storage = "_PurchaseAttachmentId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseAttachmentId
        {
            get
            {
                return this._PurchaseAttachmentId;
            }
            set
            {
                if (this._PurchaseAttachmentId != value)
                {
                    this.OnPurchaseAttachmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseAttachmentId = value;
                    this.SendPropertyChanged("PurchaseAttachmentId");
                    this.OnPurchaseAttachmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    if (this._Purchase.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [Column(Name = @"content", Storage = "_Content", CanBeNull = false, DbType = "LONGBLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this.OnContentChanging(value);
                    this.SendPropertyChanging();
                    this._Content = value;
                    this.SendPropertyChanged("Content");
                    this.OnContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Purchase in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Purchase_PurchaseAttachment", Storage="_Purchase", ThisKey="PurchaseId", OtherKey="PurchaseId", IsForeignKey=true)]
        public Purchase Purchase
        {
            get
            {
                return this._Purchase.Entity;
            }
            set
            {
                Purchase previousValue = this._Purchase.Entity;
                if ((previousValue != value) || (this._Purchase.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Purchase.Entity = null;
                        previousValue.PurchaseAttachments.Remove(this);
                    }
                    this._Purchase.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseId = value.PurchaseId;
                        value.PurchaseAttachments.Add(this);
                    }
                    else
                    {
                        this._PurchaseId = default(int);
                    }
                    this.SendPropertyChanged("Purchase");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.AccountCode in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.account_code")]
    public partial class AccountCode : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AccountCodeId;

        private string _Code;

        private string _Text;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAccountCodeIdChanging(int value);
        partial void OnAccountCodeIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public AccountCode()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AccountCodeId in the schema.
        /// </summary>
        [Column(Name = @"account_code_id", Storage = "_AccountCodeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AccountCodeId
        {
            get
            {
                return this._AccountCodeId;
            }
            set
            {
                if (this._AccountCodeId != value)
                {
                    this.OnAccountCodeIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountCodeId = value;
                    this.SendPropertyChanged("AccountCodeId");
                    this.OnAccountCodeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Text in the schema.
        /// </summary>
        [Column(Name = @"`text`", Storage = "_Text", CanBeNull = false, DbType = "VARCHAR(40) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.CostCenter in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.cost_center")]
    public partial class CostCenter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CostCenterId;

        private string _Code;

        private string _Name;

        private string _Plant;

        private string _Department;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCostCenterIdChanging(int value);
        partial void OnCostCenterIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPlantChanging(string value);
        partial void OnPlantChanged();
        partial void OnDepartmentChanging(string value);
        partial void OnDepartmentChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public CostCenter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CostCenterId in the schema.
        /// </summary>
        [Column(Name = @"cost_center_id", Storage = "_CostCenterId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CostCenterId
        {
            get
            {
                return this._CostCenterId;
            }
            set
            {
                if (this._CostCenterId != value)
                {
                    this.OnCostCenterIdChanging(value);
                    this.SendPropertyChanging();
                    this._CostCenterId = value;
                    this.SendPropertyChanged("CostCenterId");
                    this.OnCostCenterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Plant in the schema.
        /// </summary>
        [Column(Name = @"plant", Storage = "_Plant", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Plant
        {
            get
            {
                return this._Plant;
            }
            set
            {
                if (this._Plant != value)
                {
                    this.OnPlantChanging(value);
                    this.SendPropertyChanging();
                    this._Plant = value;
                    this.SendPropertyChanged("Plant");
                    this.OnPlantChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Department in the schema.
        /// </summary>
        [Column(Name = @"department", Storage = "_Department", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Department
        {
            get
            {
                return this._Department;
            }
            set
            {
                if (this._Department != value)
                {
                    this.OnDepartmentChanging(value);
                    this.SendPropertyChanging();
                    this._Department = value;
                    this.SendPropertyChanged("Department");
                    this.OnDepartmentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PmOrder in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.pm_order")]
    public partial class PmOrder : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PmOrderId;

        private string _Code;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPmOrderIdChanging(int value);
        partial void OnPmOrderIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PmOrder()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PmOrderId in the schema.
        /// </summary>
        [Column(Name = @"pm_order_id", Storage = "_PmOrderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PmOrderId
        {
            get
            {
                return this._PmOrderId;
            }
            set
            {
                if (this._PmOrderId != value)
                {
                    this.OnPmOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PmOrderId = value;
                    this.SendPropertyChanged("PmOrderId");
                    this.OnPmOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Notification in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.notification")]
    public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _NotificationId;

        private string _Description;

        private string _FromEmailAddress;

        private string _Subject;

        private string _Body;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNotificationIdChanging(int value);
        partial void OnNotificationIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnFromEmailAddressChanging(string value);
        partial void OnFromEmailAddressChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Notification()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NotificationId in the schema.
        /// </summary>
        [Column(Name = @"notification_id", Storage = "_NotificationId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int NotificationId
        {
            get
            {
                return this._NotificationId;
            }
            set
            {
                if (this._NotificationId != value)
                {
                    this.OnNotificationIdChanging(value);
                    this.SendPropertyChanging();
                    this._NotificationId = value;
                    this.SendPropertyChanged("NotificationId");
                    this.OnNotificationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"from_email_address", Storage = "_FromEmailAddress", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FromEmailAddress
        {
            get
            {
                return this._FromEmailAddress;
            }
            set
            {
                if (this._FromEmailAddress != value)
                {
                    this.OnFromEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._FromEmailAddress = value;
                    this.SendPropertyChanged("FromEmailAddress");
                    this.OnFromEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subject in the schema.
        /// </summary>
        [Column(Name = @"subject", Storage = "_Subject", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Body in the schema.
        /// </summary>
        [Column(Name = @"body", Storage = "_Body", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Body
        {
            get
            {
                return this._Body;
            }
            set
            {
                if (this._Body != value)
                {
                    this.OnBodyChanging(value);
                    this.SendPropertyChanging();
                    this._Body = value;
                    this.SendPropertyChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseOrderTodo in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_order_todo")]
    public partial class PurchaseOrderTodo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseOrderTodoId;

        private int _UserAccountId;

        private int _PurchaseOrderId;

        private int _PurchaseOrderTodoStatus;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderTodoIdChanging(int value);
        partial void OnPurchaseOrderTodoIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnPurchaseOrderIdChanging(int value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderTodoStatusChanging(int value);
        partial void OnPurchaseOrderTodoStatusChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseOrderTodo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderTodoId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_todo_id", Storage = "_PurchaseOrderTodoId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseOrderTodoId
        {
            get
            {
                return this._PurchaseOrderTodoId;
            }
            set
            {
                if (this._PurchaseOrderTodoId != value)
                {
                    this.OnPurchaseOrderTodoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderTodoId = value;
                    this.SendPropertyChanged("PurchaseOrderTodoId");
                    this.OnPurchaseOrderTodoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_id", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderTodoStatus in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_todo_status", Storage = "_PurchaseOrderTodoStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderTodoStatus
        {
            get
            {
                return this._PurchaseOrderTodoStatus;
            }
            set
            {
                if (this._PurchaseOrderTodoStatus != value)
                {
                    this.OnPurchaseOrderTodoStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderTodoStatus = value;
                    this.SendPropertyChanged("PurchaseOrderTodoStatus");
                    this.OnPurchaseOrderTodoStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseOrderAttachment in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_order_attachment")]
    public partial class PurchaseOrderAttachment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseOrderAttachmentId;

        private int _PurchaseOrderId;

        private string _PurchaseOrderNumber;

        private string _Filename;

        private byte[] _Content;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<PurchaseOrder> _PurchaseOrder;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderAttachmentIdChanging(int value);
        partial void OnPurchaseOrderAttachmentIdChanged();
        partial void OnPurchaseOrderIdChanging(int value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderNumberChanging(string value);
        partial void OnPurchaseOrderNumberChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseOrderAttachment()
        {
            this._PurchaseOrder  = default(EntityRef<PurchaseOrder>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderAttachmentId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_attachment_id", Storage = "_PurchaseOrderAttachmentId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseOrderAttachmentId
        {
            get
            {
                return this._PurchaseOrderAttachmentId;
            }
            set
            {
                if (this._PurchaseOrderAttachmentId != value)
                {
                    this.OnPurchaseOrderAttachmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderAttachmentId = value;
                    this.SendPropertyChanged("PurchaseOrderAttachmentId");
                    this.OnPurchaseOrderAttachmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_id", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    if (this._PurchaseOrder.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_number", Storage = "_PurchaseOrderNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._PurchaseOrderNumber;
            }
            set
            {
                if (this._PurchaseOrderNumber != value)
                {
                    this.OnPurchaseOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderNumber = value;
                    this.SendPropertyChanged("PurchaseOrderNumber");
                    this.OnPurchaseOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [Column(Name = @"content", Storage = "_Content", CanBeNull = false, DbType = "LONGBLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this.OnContentChanging(value);
                    this.SendPropertyChanging();
                    this._Content = value;
                    this.SendPropertyChanged("Content");
                    this.OnContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrder in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseOrder_PurchaseOrderAttachment", Storage="_PurchaseOrder", ThisKey="PurchaseOrderId", OtherKey="PurchaseOrderId", IsForeignKey=true)]
        public PurchaseOrder PurchaseOrder
        {
            get
            {
                return this._PurchaseOrder.Entity;
            }
            set
            {
                PurchaseOrder previousValue = this._PurchaseOrder.Entity;
                if ((previousValue != value) || (this._PurchaseOrder.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PurchaseOrder.Entity = null;
                        previousValue.PurchaseOrderAttachments.Remove(this);
                    }
                    this._PurchaseOrder.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseOrderId = value.PurchaseOrderId;
                        value.PurchaseOrderAttachments.Add(this);
                    }
                    else
                    {
                        this._PurchaseOrderId = default(int);
                    }
                    this.SendPropertyChanged("PurchaseOrder");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Vendor in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.vendor")]
    public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VendorId;

        private string _VendorCode;

        private string _Name1;

        private string _Name2;

        private string _Street;

        private string _City;

        private string _Postcode;

        private string _Tel;

        private string _Fax;

        private string _Email;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVendorIdChanging(int value);
        partial void OnVendorIdChanged();
        partial void OnVendorCodeChanging(string value);
        partial void OnVendorCodeChanged();
        partial void OnName1Changing(string value);
        partial void OnName1Changed();
        partial void OnName2Changing(string value);
        partial void OnName2Changed();
        partial void OnStreetChanging(string value);
        partial void OnStreetChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnTelChanging(string value);
        partial void OnTelChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Vendor()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VendorId in the schema.
        /// </summary>
        [Column(Name = @"vendor_id", Storage = "_VendorId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int VendorId
        {
            get
            {
                return this._VendorId;
            }
            set
            {
                if (this._VendorId != value)
                {
                    this.OnVendorIdChanging(value);
                    this.SendPropertyChanging();
                    this._VendorId = value;
                    this.SendPropertyChanged("VendorId");
                    this.OnVendorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorCode in the schema.
        /// </summary>
        [Column(Name = @"vendor_code", Storage = "_VendorCode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorCode
        {
            get
            {
                return this._VendorCode;
            }
            set
            {
                if (this._VendorCode != value)
                {
                    this.OnVendorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._VendorCode = value;
                    this.SendPropertyChanged("VendorCode");
                    this.OnVendorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name1 in the schema.
        /// </summary>
        [Column(Name = @"name1", Storage = "_Name1", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name1
        {
            get
            {
                return this._Name1;
            }
            set
            {
                if (this._Name1 != value)
                {
                    this.OnName1Changing(value);
                    this.SendPropertyChanging();
                    this._Name1 = value;
                    this.SendPropertyChanged("Name1");
                    this.OnName1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name2 in the schema.
        /// </summary>
        [Column(Name = @"name2", Storage = "_Name2", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name2
        {
            get
            {
                return this._Name2;
            }
            set
            {
                if (this._Name2 != value)
                {
                    this.OnName2Changing(value);
                    this.SendPropertyChanging();
                    this._Name2 = value;
                    this.SendPropertyChanged("Name2");
                    this.OnName2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Street in the schema.
        /// </summary>
        [Column(Name = @"street", Storage = "_Street", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Street
        {
            get
            {
                return this._Street;
            }
            set
            {
                if (this._Street != value)
                {
                    this.OnStreetChanging(value);
                    this.SendPropertyChanging();
                    this._Street = value;
                    this.SendPropertyChanged("Street");
                    this.OnStreetChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postcode in the schema.
        /// </summary>
        [Column(Name = @"postcode", Storage = "_Postcode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if (this._Postcode != value)
                {
                    this.OnPostcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Postcode = value;
                    this.SendPropertyChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tel in the schema.
        /// </summary>
        [Column(Name = @"tel", Storage = "_Tel", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tel
        {
            get
            {
                return this._Tel;
            }
            set
            {
                if (this._Tel != value)
                {
                    this.OnTelChanging(value);
                    this.SendPropertyChanging();
                    this._Tel = value;
                    this.SendPropertyChanged("Tel");
                    this.OnTelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"fax", Storage = "_Fax", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(2000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseOrderCancel in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_order_cancel")]
    public partial class PurchaseOrderCancel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseOrderCancelId;

        private int _PurchaseId;

        private string _PurchaseNumber;

        private int _PurchaseOrderId;

        private string _PurchaseOrderNumber;

        private string _CancelReason;

        private string _VendorCode;

        private string _Name1;

        private string _Name2;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseOrderCancelIdChanging(int value);
        partial void OnPurchaseOrderCancelIdChanged();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnPurchaseOrderIdChanging(int value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderNumberChanging(string value);
        partial void OnPurchaseOrderNumberChanged();
        partial void OnCancelReasonChanging(string value);
        partial void OnCancelReasonChanged();
        partial void OnVendorCodeChanging(string value);
        partial void OnVendorCodeChanged();
        partial void OnName1Changing(string value);
        partial void OnName1Changed();
        partial void OnName2Changing(string value);
        partial void OnName2Changed();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseOrderCancel()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderCancelId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_cancel_id", Storage = "_PurchaseOrderCancelId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseOrderCancelId
        {
            get
            {
                return this._PurchaseOrderCancelId;
            }
            set
            {
                if (this._PurchaseOrderCancelId != value)
                {
                    this.OnPurchaseOrderCancelIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderCancelId = value;
                    this.SendPropertyChanged("PurchaseOrderCancelId");
                    this.OnPurchaseOrderCancelIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_id", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_number", Storage = "_PurchaseOrderNumber", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._PurchaseOrderNumber;
            }
            set
            {
                if (this._PurchaseOrderNumber != value)
                {
                    this.OnPurchaseOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderNumber = value;
                    this.SendPropertyChanged("PurchaseOrderNumber");
                    this.OnPurchaseOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelReason in the schema.
        /// </summary>
        [Column(Name = @"cancel_reason", Storage = "_CancelReason", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CancelReason
        {
            get
            {
                return this._CancelReason;
            }
            set
            {
                if (this._CancelReason != value)
                {
                    this.OnCancelReasonChanging(value);
                    this.SendPropertyChanging();
                    this._CancelReason = value;
                    this.SendPropertyChanged("CancelReason");
                    this.OnCancelReasonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorCode in the schema.
        /// </summary>
        [Column(Name = @"vendor_code", Storage = "_VendorCode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string VendorCode
        {
            get
            {
                return this._VendorCode;
            }
            set
            {
                if (this._VendorCode != value)
                {
                    this.OnVendorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._VendorCode = value;
                    this.SendPropertyChanged("VendorCode");
                    this.OnVendorCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name1 in the schema.
        /// </summary>
        [Column(Name = @"name1", Storage = "_Name1", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name1
        {
            get
            {
                return this._Name1;
            }
            set
            {
                if (this._Name1 != value)
                {
                    this.OnName1Changing(value);
                    this.SendPropertyChanging();
                    this._Name1 = value;
                    this.SendPropertyChanged("Name1");
                    this.OnName1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name2 in the schema.
        /// </summary>
        [Column(Name = @"name2", Storage = "_Name2", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name2
        {
            get
            {
                return this._Name2;
            }
            set
            {
                if (this._Name2 != value)
                {
                    this.OnName2Changing(value);
                    this.SendPropertyChanging();
                    this._Name2 = value;
                    this.SendPropertyChanged("Name2");
                    this.OnName2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Unit in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.unit")]
    public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UnitId;

        private string _Code;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUnitIdChanging(int value);
        partial void OnUnitIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Unit()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UnitId in the schema.
        /// </summary>
        [Column(Name = @"unit_id", Storage = "_UnitId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UnitId
        {
            get
            {
                return this._UnitId;
            }
            set
            {
                if (this._UnitId != value)
                {
                    this.OnUnitIdChanging(value);
                    this.SendPropertyChanging();
                    this._UnitId = value;
                    this.SendPropertyChanged("UnitId");
                    this.OnUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Audit in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.audit")]
    public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AuditId;

        private string _ObjectName;

        private int _RecordId;

        private string _PropertyName;

        private string _OldValue;

        private string _NewValue;

        private int _AuditType;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAuditIdChanging(int value);
        partial void OnAuditIdChanged();
        partial void OnObjectNameChanging(string value);
        partial void OnObjectNameChanged();
        partial void OnRecordIdChanging(int value);
        partial void OnRecordIdChanged();
        partial void OnPropertyNameChanging(string value);
        partial void OnPropertyNameChanged();
        partial void OnOldValueChanging(string value);
        partial void OnOldValueChanged();
        partial void OnNewValueChanging(string value);
        partial void OnNewValueChanged();
        partial void OnAuditTypeChanging(int value);
        partial void OnAuditTypeChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Audit()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AuditId in the schema.
        /// </summary>
        [Column(Name = @"audit_id", Storage = "_AuditId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AuditId
        {
            get
            {
                return this._AuditId;
            }
            set
            {
                if (this._AuditId != value)
                {
                    this.OnAuditIdChanging(value);
                    this.SendPropertyChanging();
                    this._AuditId = value;
                    this.SendPropertyChanged("AuditId");
                    this.OnAuditIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ObjectName in the schema.
        /// </summary>
        [Column(Name = @"object_name", Storage = "_ObjectName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ObjectName
        {
            get
            {
                return this._ObjectName;
            }
            set
            {
                if (this._ObjectName != value)
                {
                    this.OnObjectNameChanging(value);
                    this.SendPropertyChanging();
                    this._ObjectName = value;
                    this.SendPropertyChanged("ObjectName");
                    this.OnObjectNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecordId in the schema.
        /// </summary>
        [Column(Name = @"record_id", Storage = "_RecordId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RecordId
        {
            get
            {
                return this._RecordId;
            }
            set
            {
                if (this._RecordId != value)
                {
                    this.OnRecordIdChanging(value);
                    this.SendPropertyChanging();
                    this._RecordId = value;
                    this.SendPropertyChanged("RecordId");
                    this.OnRecordIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PropertyName in the schema.
        /// </summary>
        [Column(Name = @"property_name", Storage = "_PropertyName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PropertyName
        {
            get
            {
                return this._PropertyName;
            }
            set
            {
                if (this._PropertyName != value)
                {
                    this.OnPropertyNameChanging(value);
                    this.SendPropertyChanging();
                    this._PropertyName = value;
                    this.SendPropertyChanged("PropertyName");
                    this.OnPropertyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OldValue in the schema.
        /// </summary>
        [Column(Name = @"old_value", Storage = "_OldValue", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if (this._OldValue != value)
                {
                    this.OnOldValueChanging(value);
                    this.SendPropertyChanging();
                    this._OldValue = value;
                    this.SendPropertyChanged("OldValue");
                    this.OnOldValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NewValue in the schema.
        /// </summary>
        [Column(Name = @"new_value", Storage = "_NewValue", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NewValue
        {
            get
            {
                return this._NewValue;
            }
            set
            {
                if (this._NewValue != value)
                {
                    this.OnNewValueChanging(value);
                    this.SendPropertyChanging();
                    this._NewValue = value;
                    this.SendPropertyChanged("NewValue");
                    this.OnNewValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AuditType in the schema.
        /// </summary>
        [Column(Name = @"audit_type", Storage = "_AuditType", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AuditType
        {
            get
            {
                return this._AuditType;
            }
            set
            {
                if (this._AuditType != value)
                {
                    this.OnAuditTypeChanging(value);
                    this.SendPropertyChanging();
                    this._AuditType = value;
                    this.SendPropertyChanged("AuditType");
                    this.OnAuditTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.AuditObject in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.audit_object")]
    public partial class AuditObject : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AuditObjectId;

        private string _ObjectName;

        private string _ObjectFullyQualifiedName;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAuditObjectIdChanging(int value);
        partial void OnAuditObjectIdChanged();
        partial void OnObjectNameChanging(string value);
        partial void OnObjectNameChanged();
        partial void OnObjectFullyQualifiedNameChanging(string value);
        partial void OnObjectFullyQualifiedNameChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public AuditObject()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AuditObjectId in the schema.
        /// </summary>
        [Column(Name = @"audit_object_id", Storage = "_AuditObjectId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AuditObjectId
        {
            get
            {
                return this._AuditObjectId;
            }
            set
            {
                if (this._AuditObjectId != value)
                {
                    this.OnAuditObjectIdChanging(value);
                    this.SendPropertyChanging();
                    this._AuditObjectId = value;
                    this.SendPropertyChanged("AuditObjectId");
                    this.OnAuditObjectIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ObjectName in the schema.
        /// </summary>
        [Column(Name = @"object_name", Storage = "_ObjectName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ObjectName
        {
            get
            {
                return this._ObjectName;
            }
            set
            {
                if (this._ObjectName != value)
                {
                    this.OnObjectNameChanging(value);
                    this.SendPropertyChanging();
                    this._ObjectName = value;
                    this.SendPropertyChanged("ObjectName");
                    this.OnObjectNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ObjectFullyQualifiedName in the schema.
        /// </summary>
        [Column(Name = @"object_fully_qualified_name", Storage = "_ObjectFullyQualifiedName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ObjectFullyQualifiedName
        {
            get
            {
                return this._ObjectFullyQualifiedName;
            }
            set
            {
                if (this._ObjectFullyQualifiedName != value)
                {
                    this.OnObjectFullyQualifiedNameChanging(value);
                    this.SendPropertyChanging();
                    this._ObjectFullyQualifiedName = value;
                    this.SendPropertyChanged("ObjectFullyQualifiedName");
                    this.OnObjectFullyQualifiedNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.AuditObjectProperty in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.audit_object_property")]
    public partial class AuditObjectProperty : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AuditObjectPropertyId;

        private int _AuditObjectId;

        private string _PropertyName;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAuditObjectPropertyIdChanging(int value);
        partial void OnAuditObjectPropertyIdChanged();
        partial void OnAuditObjectIdChanging(int value);
        partial void OnAuditObjectIdChanged();
        partial void OnPropertyNameChanging(string value);
        partial void OnPropertyNameChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public AuditObjectProperty()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AuditObjectPropertyId in the schema.
        /// </summary>
        [Column(Name = @"audit_object_property_id", Storage = "_AuditObjectPropertyId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AuditObjectPropertyId
        {
            get
            {
                return this._AuditObjectPropertyId;
            }
            set
            {
                if (this._AuditObjectPropertyId != value)
                {
                    this.OnAuditObjectPropertyIdChanging(value);
                    this.SendPropertyChanging();
                    this._AuditObjectPropertyId = value;
                    this.SendPropertyChanged("AuditObjectPropertyId");
                    this.OnAuditObjectPropertyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AuditObjectId in the schema.
        /// </summary>
        [Column(Name = @"audit_object_id", Storage = "_AuditObjectId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AuditObjectId
        {
            get
            {
                return this._AuditObjectId;
            }
            set
            {
                if (this._AuditObjectId != value)
                {
                    this.OnAuditObjectIdChanging(value);
                    this.SendPropertyChanging();
                    this._AuditObjectId = value;
                    this.SendPropertyChanged("AuditObjectId");
                    this.OnAuditObjectIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PropertyName in the schema.
        /// </summary>
        [Column(Name = @"property_name", Storage = "_PropertyName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PropertyName
        {
            get
            {
                return this._PropertyName;
            }
            set
            {
                if (this._PropertyName != value)
                {
                    this.OnPropertyNameChanging(value);
                    this.SendPropertyChanging();
                    this._PropertyName = value;
                    this.SendPropertyChanged("PropertyName");
                    this.OnPropertyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.PurchaseForecastAttachment in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.purchase_forecast_attachment")]
    public partial class PurchaseForecastAttachment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseForecastAttachmentId;

        private int _PurchaseId;

        private string _PurchaseNumber;

        private string _Filename;

        private byte[] _Content;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<Purchase> _Purchase;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseForecastAttachmentIdChanging(int value);
        partial void OnPurchaseForecastAttachmentIdChanged();
        partial void OnPurchaseIdChanging(int value);
        partial void OnPurchaseIdChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public PurchaseForecastAttachment()
        {
            this._Purchase  = default(EntityRef<Purchase>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseForecastAttachmentId in the schema.
        /// </summary>
        [Column(Name = @"purchase_forecast_attachment_id", Storage = "_PurchaseForecastAttachmentId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseForecastAttachmentId
        {
            get
            {
                return this._PurchaseForecastAttachmentId;
            }
            set
            {
                if (this._PurchaseForecastAttachmentId != value)
                {
                    this.OnPurchaseForecastAttachmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseForecastAttachmentId = value;
                    this.SendPropertyChanged("PurchaseForecastAttachmentId");
                    this.OnPurchaseForecastAttachmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseId in the schema.
        /// </summary>
        [Column(Name = @"purchase_id", Storage = "_PurchaseId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseId
        {
            get
            {
                return this._PurchaseId;
            }
            set
            {
                if (this._PurchaseId != value)
                {
                    if (this._Purchase.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPurchaseIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseId = value;
                    this.SendPropertyChanged("PurchaseId");
                    this.OnPurchaseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [Column(Name = @"content", Storage = "_Content", CanBeNull = false, DbType = "LONGBLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this.OnContentChanging(value);
                    this.SendPropertyChanging();
                    this._Content = value;
                    this.SendPropertyChanged("Content");
                    this.OnContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Purchase in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Purchase_PurchaseForecastAttachment", Storage="_Purchase", ThisKey="PurchaseId", OtherKey="PurchaseId", IsForeignKey=true)]
        public Purchase Purchase
        {
            get
            {
                return this._Purchase.Entity;
            }
            set
            {
                Purchase previousValue = this._Purchase.Entity;
                if ((previousValue != value) || (this._Purchase.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Purchase.Entity = null;
                        previousValue.PurchaseForecastAttachments.Remove(this);
                    }
                    this._Purchase.Entity = value;
                    if (value != null)
                    {
                        this._PurchaseId = value.PurchaseId;
                        value.PurchaseForecastAttachments.Add(this);
                    }
                    else
                    {
                        this._PurchaseId = default(int);
                    }
                    this.SendPropertyChanged("Purchase");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.GoodsReceived in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.goods_received")]
    public partial class GoodsReceived : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _GoodsReceivedId;

        private int _PurchaseOrderId;

        private string _PurchaseOrderNumber;

        private string _PurchaseNumber;

        private System.DateTime _ReceivedDate;

        private int _PurchaseOrderItemId;

        private string _PurchaseOrderItemDescription;

        private string _PurchaseItemUnit;

        private double _GoodsReceivedQty;

        private string _Remark;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnGoodsReceivedIdChanging(int value);
        partial void OnGoodsReceivedIdChanged();
        partial void OnPurchaseOrderIdChanging(int value);
        partial void OnPurchaseOrderIdChanged();
        partial void OnPurchaseOrderNumberChanging(string value);
        partial void OnPurchaseOrderNumberChanged();
        partial void OnPurchaseNumberChanging(string value);
        partial void OnPurchaseNumberChanged();
        partial void OnReceivedDateChanging(System.DateTime value);
        partial void OnReceivedDateChanged();
        partial void OnPurchaseOrderItemIdChanging(int value);
        partial void OnPurchaseOrderItemIdChanged();
        partial void OnPurchaseOrderItemDescriptionChanging(string value);
        partial void OnPurchaseOrderItemDescriptionChanged();
        partial void OnPurchaseItemUnitChanging(string value);
        partial void OnPurchaseItemUnitChanged();
        partial void OnGoodsReceivedQtyChanging(double value);
        partial void OnGoodsReceivedQtyChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public GoodsReceived()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GoodsReceivedId in the schema.
        /// </summary>
        [Column(Name = @"goods_received_id", Storage = "_GoodsReceivedId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int GoodsReceivedId
        {
            get
            {
                return this._GoodsReceivedId;
            }
            set
            {
                if (this._GoodsReceivedId != value)
                {
                    this.OnGoodsReceivedIdChanging(value);
                    this.SendPropertyChanging();
                    this._GoodsReceivedId = value;
                    this.SendPropertyChanged("GoodsReceivedId");
                    this.OnGoodsReceivedIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_id", Storage = "_PurchaseOrderId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderId
        {
            get
            {
                return this._PurchaseOrderId;
            }
            set
            {
                if (this._PurchaseOrderId != value)
                {
                    this.OnPurchaseOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderId = value;
                    this.SendPropertyChanged("PurchaseOrderId");
                    this.OnPurchaseOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_number", Storage = "_PurchaseOrderNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._PurchaseOrderNumber;
            }
            set
            {
                if (this._PurchaseOrderNumber != value)
                {
                    this.OnPurchaseOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderNumber = value;
                    this.SendPropertyChanged("PurchaseOrderNumber");
                    this.OnPurchaseOrderNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseNumber in the schema.
        /// </summary>
        [Column(Name = @"purchase_number", Storage = "_PurchaseNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseNumber
        {
            get
            {
                return this._PurchaseNumber;
            }
            set
            {
                if (this._PurchaseNumber != value)
                {
                    this.OnPurchaseNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseNumber = value;
                    this.SendPropertyChanged("PurchaseNumber");
                    this.OnPurchaseNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceivedDate in the schema.
        /// </summary>
        [Column(Name = @"received_date", Storage = "_ReceivedDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ReceivedDate
        {
            get
            {
                return this._ReceivedDate;
            }
            set
            {
                if (this._ReceivedDate != value)
                {
                    this.OnReceivedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReceivedDate = value;
                    this.SendPropertyChanged("ReceivedDate");
                    this.OnReceivedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItemId in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_item_id", Storage = "_PurchaseOrderItemId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PurchaseOrderItemId
        {
            get
            {
                return this._PurchaseOrderItemId;
            }
            set
            {
                if (this._PurchaseOrderItemId != value)
                {
                    this.OnPurchaseOrderItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderItemId = value;
                    this.SendPropertyChanged("PurchaseOrderItemId");
                    this.OnPurchaseOrderItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderItemDescription in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_item_description", Storage = "_PurchaseOrderItemDescription", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderItemDescription
        {
            get
            {
                return this._PurchaseOrderItemDescription;
            }
            set
            {
                if (this._PurchaseOrderItemDescription != value)
                {
                    this.OnPurchaseOrderItemDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderItemDescription = value;
                    this.SendPropertyChanged("PurchaseOrderItemDescription");
                    this.OnPurchaseOrderItemDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseItemUnit in the schema.
        /// </summary>
        [Column(Name = @"purchase_item_unit", Storage = "_PurchaseItemUnit", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseItemUnit
        {
            get
            {
                return this._PurchaseItemUnit;
            }
            set
            {
                if (this._PurchaseItemUnit != value)
                {
                    this.OnPurchaseItemUnitChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseItemUnit = value;
                    this.SendPropertyChanged("PurchaseItemUnit");
                    this.OnPurchaseItemUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsReceivedQty in the schema.
        /// </summary>
        [Column(Name = @"goods_received_qty", Storage = "_GoodsReceivedQty", CanBeNull = false, DbType = "DECIMAL(13,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double GoodsReceivedQty
        {
            get
            {
                return this._GoodsReceivedQty;
            }
            set
            {
                if (this._GoodsReceivedQty != value)
                {
                    this.OnGoodsReceivedQtyChanging(value);
                    this.SendPropertyChanging();
                    this._GoodsReceivedQty = value;
                    this.SendPropertyChanged("GoodsReceivedQty");
                    this.OnGoodsReceivedQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Name = @"remark", Storage = "_Remark", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging();
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserPoApprover in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_po_approver")]
    public partial class UserPoApprover : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserApproverId;

        private int _UserAccountId;

        private int _ApproverId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserApproverIdChanging(int value);
        partial void OnUserApproverIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnApproverIdChanging(int value);
        partial void OnApproverIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserPoApprover()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserApproverId in the schema.
        /// </summary>
        [Column(Name = @"user_approver_id", Storage = "_UserApproverId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserApproverId
        {
            get
            {
                return this._UserApproverId;
            }
            set
            {
                if (this._UserApproverId != value)
                {
                    this.OnUserApproverIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserApproverId = value;
                    this.SendPropertyChanged("UserApproverId");
                    this.OnUserApproverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproverId in the schema.
        /// </summary>
        [Column(Name = @"approver_id", Storage = "_ApproverId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproverId
        {
            get
            {
                return this._ApproverId;
            }
            set
            {
                if (this._ApproverId != value)
                {
                    this.OnApproverIdChanging(value);
                    this.SendPropertyChanging();
                    this._ApproverId = value;
                    this.SendPropertyChanged("ApproverId");
                    this.OnApproverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserPoReviewer1 in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_po_reviewer1")]
    public partial class UserPoReviewer1 : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserReviewerId;

        private int _UserAccountId;

        private int _ReviewerId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserReviewerIdChanging(int value);
        partial void OnUserReviewerIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnReviewerIdChanging(int value);
        partial void OnReviewerIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserPoReviewer1()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserReviewerId in the schema.
        /// </summary>
        [Column(Name = @"user_reviewer_id", Storage = "_UserReviewerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserReviewerId
        {
            get
            {
                return this._UserReviewerId;
            }
            set
            {
                if (this._UserReviewerId != value)
                {
                    this.OnUserReviewerIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserReviewerId = value;
                    this.SendPropertyChanged("UserReviewerId");
                    this.OnUserReviewerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewerId in the schema.
        /// </summary>
        [Column(Name = @"reviewer_id", Storage = "_ReviewerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewerId
        {
            get
            {
                return this._ReviewerId;
            }
            set
            {
                if (this._ReviewerId != value)
                {
                    this.OnReviewerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewerId = value;
                    this.SendPropertyChanged("ReviewerId");
                    this.OnReviewerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserPoReviewer2 in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_po_reviewer2")]
    public partial class UserPoReviewer2 : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserReviewerId;

        private int _UserAccountId;

        private int _ReviewerId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserReviewerIdChanging(int value);
        partial void OnUserReviewerIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnReviewerIdChanging(int value);
        partial void OnReviewerIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserPoReviewer2()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserReviewerId in the schema.
        /// </summary>
        [Column(Name = @"user_reviewer_id", Storage = "_UserReviewerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserReviewerId
        {
            get
            {
                return this._UserReviewerId;
            }
            set
            {
                if (this._UserReviewerId != value)
                {
                    this.OnUserReviewerIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserReviewerId = value;
                    this.SendPropertyChanged("UserReviewerId");
                    this.OnUserReviewerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReviewerId in the schema.
        /// </summary>
        [Column(Name = @"reviewer_id", Storage = "_ReviewerId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReviewerId
        {
            get
            {
                return this._ReviewerId;
            }
            set
            {
                if (this._ReviewerId != value)
                {
                    this.OnReviewerIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewerId = value;
                    this.SendPropertyChanged("ReviewerId");
                    this.OnReviewerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.UserApprover2 in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.user_approver2")]
    public partial class UserApprover2 : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserApproverId;

        private int _UserAccountId;

        private int _ApproverId;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserApproverIdChanging(int value);
        partial void OnUserApproverIdChanged();
        partial void OnUserAccountIdChanging(int value);
        partial void OnUserAccountIdChanged();
        partial void OnApproverIdChanging(int value);
        partial void OnApproverIdChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public UserApprover2()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserApproverId in the schema.
        /// </summary>
        [Column(Name = @"user_approver_id", Storage = "_UserApproverId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserApproverId
        {
            get
            {
                return this._UserApproverId;
            }
            set
            {
                if (this._UserApproverId != value)
                {
                    this.OnUserApproverIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserApproverId = value;
                    this.SendPropertyChanged("UserApproverId");
                    this.OnUserApproverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAccountId in the schema.
        /// </summary>
        [Column(Name = @"user_account_id", Storage = "_UserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserAccountId
        {
            get
            {
                return this._UserAccountId;
            }
            set
            {
                if (this._UserAccountId != value)
                {
                    this.OnUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserAccountId = value;
                    this.SendPropertyChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproverId in the schema.
        /// </summary>
        [Column(Name = @"approver_id", Storage = "_ApproverId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ApproverId
        {
            get
            {
                return this._ApproverId;
            }
            set
            {
                if (this._ApproverId != value)
                {
                    this.OnApproverIdChanging(value);
                    this.SendPropertyChanging();
                    this._ApproverId = value;
                    this.SendPropertyChanged("ApproverId");
                    this.OnApproverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.BomMaster in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.bom_master")]
    public partial class BomMaster : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BomMasterId;

        private string _ItemCode;

        private string _ComponentNumber;

        private bool _Deleted;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBomMasterIdChanging(int value);
        partial void OnBomMasterIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnComponentNumberChanging(string value);
        partial void OnComponentNumberChanged();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public BomMaster()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BomMasterId in the schema.
        /// </summary>
        [Column(Name = @"bom_master_id", Storage = "_BomMasterId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BomMasterId
        {
            get
            {
                return this._BomMasterId;
            }
            set
            {
                if (this._BomMasterId != value)
                {
                    this.OnBomMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._BomMasterId = value;
                    this.SendPropertyChanged("BomMasterId");
                    this.OnBomMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCode in the schema.
        /// </summary>
        [Column(Name = @"item_code", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComponentNumber in the schema.
        /// </summary>
        [Column(Name = @"component_number", Storage = "_ComponentNumber", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ComponentNumber
        {
            get
            {
                return this._ComponentNumber;
            }
            set
            {
                if (this._ComponentNumber != value)
                {
                    this.OnComponentNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ComponentNumber = value;
                    this.SendPropertyChanged("ComponentNumber");
                    this.OnComponentNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.GoodsRec in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.goods_rec")]
    public partial class GoodsRec : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _GoodsRecId;

        private string _KeyName;

        private string _ItemCode;

        private string _ComponentNumber;

        private string _ToolingCode;

        private string _MaterialDocumentNo;

        private System.DateTime _PostingDate;

        private string _SupplierCode;

        private string _PurchaseOrderNo;

        private int _PoItemNo;

        private int _RecQty;

        private string _InvoiceNo;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnGoodsRecIdChanging(int value);
        partial void OnGoodsRecIdChanged();
        partial void OnKeyNameChanging(string value);
        partial void OnKeyNameChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnComponentNumberChanging(string value);
        partial void OnComponentNumberChanged();
        partial void OnToolingCodeChanging(string value);
        partial void OnToolingCodeChanged();
        partial void OnMaterialDocumentNoChanging(string value);
        partial void OnMaterialDocumentNoChanged();
        partial void OnPostingDateChanging(System.DateTime value);
        partial void OnPostingDateChanged();
        partial void OnSupplierCodeChanging(string value);
        partial void OnSupplierCodeChanged();
        partial void OnPurchaseOrderNoChanging(string value);
        partial void OnPurchaseOrderNoChanged();
        partial void OnPoItemNoChanging(int value);
        partial void OnPoItemNoChanged();
        partial void OnRecQtyChanging(int value);
        partial void OnRecQtyChanged();
        partial void OnInvoiceNoChanging(string value);
        partial void OnInvoiceNoChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public GoodsRec()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GoodsRecId in the schema.
        /// </summary>
        [Column(Name = @"goods_rec_id", Storage = "_GoodsRecId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int GoodsRecId
        {
            get
            {
                return this._GoodsRecId;
            }
            set
            {
                if (this._GoodsRecId != value)
                {
                    this.OnGoodsRecIdChanging(value);
                    this.SendPropertyChanging();
                    this._GoodsRecId = value;
                    this.SendPropertyChanged("GoodsRecId");
                    this.OnGoodsRecIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KeyName in the schema.
        /// </summary>
        [Column(Name = @"key_name", Storage = "_KeyName", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string KeyName
        {
            get
            {
                return this._KeyName;
            }
            set
            {
                if (this._KeyName != value)
                {
                    this.OnKeyNameChanging(value);
                    this.SendPropertyChanging();
                    this._KeyName = value;
                    this.SendPropertyChanged("KeyName");
                    this.OnKeyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCode in the schema.
        /// </summary>
        [Column(Name = @"item_code", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComponentNumber in the schema.
        /// </summary>
        [Column(Name = @"component_number", Storage = "_ComponentNumber", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ComponentNumber
        {
            get
            {
                return this._ComponentNumber;
            }
            set
            {
                if (this._ComponentNumber != value)
                {
                    this.OnComponentNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ComponentNumber = value;
                    this.SendPropertyChanged("ComponentNumber");
                    this.OnComponentNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToolingCode in the schema.
        /// </summary>
        [Column(Name = @"tooling_code", Storage = "_ToolingCode", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToolingCode
        {
            get
            {
                return this._ToolingCode;
            }
            set
            {
                if (this._ToolingCode != value)
                {
                    this.OnToolingCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ToolingCode = value;
                    this.SendPropertyChanged("ToolingCode");
                    this.OnToolingCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaterialDocumentNo in the schema.
        /// </summary>
        [Column(Name = @"material_document_no", Storage = "_MaterialDocumentNo", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MaterialDocumentNo
        {
            get
            {
                return this._MaterialDocumentNo;
            }
            set
            {
                if (this._MaterialDocumentNo != value)
                {
                    this.OnMaterialDocumentNoChanging(value);
                    this.SendPropertyChanging();
                    this._MaterialDocumentNo = value;
                    this.SendPropertyChanged("MaterialDocumentNo");
                    this.OnMaterialDocumentNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostingDate in the schema.
        /// </summary>
        [Column(Name = @"posting_date", Storage = "_PostingDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PostingDate
        {
            get
            {
                return this._PostingDate;
            }
            set
            {
                if (this._PostingDate != value)
                {
                    this.OnPostingDateChanging(value);
                    this.SendPropertyChanging();
                    this._PostingDate = value;
                    this.SendPropertyChanged("PostingDate");
                    this.OnPostingDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierCode in the schema.
        /// </summary>
        [Column(Name = @"supplier_code", Storage = "_SupplierCode", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SupplierCode
        {
            get
            {
                return this._SupplierCode;
            }
            set
            {
                if (this._SupplierCode != value)
                {
                    this.OnSupplierCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierCode = value;
                    this.SendPropertyChanged("SupplierCode");
                    this.OnSupplierCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseOrderNo in the schema.
        /// </summary>
        [Column(Name = @"purchase_order_no", Storage = "_PurchaseOrderNo", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseOrderNo
        {
            get
            {
                return this._PurchaseOrderNo;
            }
            set
            {
                if (this._PurchaseOrderNo != value)
                {
                    this.OnPurchaseOrderNoChanging(value);
                    this.SendPropertyChanging();
                    this._PurchaseOrderNo = value;
                    this.SendPropertyChanged("PurchaseOrderNo");
                    this.OnPurchaseOrderNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PoItemNo in the schema.
        /// </summary>
        [Column(Name = @"po_item_no", Storage = "_PoItemNo", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PoItemNo
        {
            get
            {
                return this._PoItemNo;
            }
            set
            {
                if (this._PoItemNo != value)
                {
                    this.OnPoItemNoChanging(value);
                    this.SendPropertyChanging();
                    this._PoItemNo = value;
                    this.SendPropertyChanged("PoItemNo");
                    this.OnPoItemNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecQty in the schema.
        /// </summary>
        [Column(Name = @"rec_qty", Storage = "_RecQty", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RecQty
        {
            get
            {
                return this._RecQty;
            }
            set
            {
                if (this._RecQty != value)
                {
                    this.OnRecQtyChanging(value);
                    this.SendPropertyChanging();
                    this._RecQty = value;
                    this.SendPropertyChanged("RecQty");
                    this.OnRecQtyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InvoiceNo in the schema.
        /// </summary>
        [Column(Name = @"invoice_no", Storage = "_InvoiceNo", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string InvoiceNo
        {
            get
            {
                return this._InvoiceNo;
            }
            set
            {
                if (this._InvoiceNo != value)
                {
                    this.OnInvoiceNoChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceNo = value;
                    this.SendPropertyChanged("InvoiceNo");
                    this.OnInvoiceNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.ItemMaster in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.item_master")]
    public partial class ItemMaster : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ItemMasterId;

        private string _ItemCode;

        private string _ItemName;

        private string _MaterialType;

        private string _SupplierCode;

        private int _QtyPerBox;

        private bool _CurrentSupplier;

        private bool _Deleted;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnItemMasterIdChanging(int value);
        partial void OnItemMasterIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnItemNameChanging(string value);
        partial void OnItemNameChanged();
        partial void OnMaterialTypeChanging(string value);
        partial void OnMaterialTypeChanged();
        partial void OnSupplierCodeChanging(string value);
        partial void OnSupplierCodeChanged();
        partial void OnQtyPerBoxChanging(int value);
        partial void OnQtyPerBoxChanged();
        partial void OnCurrentSupplierChanging(bool value);
        partial void OnCurrentSupplierChanged();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public ItemMaster()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ItemMasterId in the schema.
        /// </summary>
        [Column(Name = @"item_master_id", Storage = "_ItemMasterId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ItemMasterId
        {
            get
            {
                return this._ItemMasterId;
            }
            set
            {
                if (this._ItemMasterId != value)
                {
                    this.OnItemMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemMasterId = value;
                    this.SendPropertyChanged("ItemMasterId");
                    this.OnItemMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCode in the schema.
        /// </summary>
        [Column(Name = @"item_code", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemName in the schema.
        /// </summary>
        [Column(Name = @"item_name", Storage = "_ItemName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemName
        {
            get
            {
                return this._ItemName;
            }
            set
            {
                if (this._ItemName != value)
                {
                    this.OnItemNameChanging(value);
                    this.SendPropertyChanging();
                    this._ItemName = value;
                    this.SendPropertyChanged("ItemName");
                    this.OnItemNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaterialType in the schema.
        /// </summary>
        [Column(Name = @"material_type", Storage = "_MaterialType", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MaterialType
        {
            get
            {
                return this._MaterialType;
            }
            set
            {
                if (this._MaterialType != value)
                {
                    this.OnMaterialTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MaterialType = value;
                    this.SendPropertyChanged("MaterialType");
                    this.OnMaterialTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierCode in the schema.
        /// </summary>
        [Column(Name = @"supplier_code", Storage = "_SupplierCode", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SupplierCode
        {
            get
            {
                return this._SupplierCode;
            }
            set
            {
                if (this._SupplierCode != value)
                {
                    this.OnSupplierCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierCode = value;
                    this.SendPropertyChanged("SupplierCode");
                    this.OnSupplierCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QtyPerBox in the schema.
        /// </summary>
        [Column(Name = @"qty_per_box", Storage = "_QtyPerBox", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int QtyPerBox
        {
            get
            {
                return this._QtyPerBox;
            }
            set
            {
                if (this._QtyPerBox != value)
                {
                    this.OnQtyPerBoxChanging(value);
                    this.SendPropertyChanging();
                    this._QtyPerBox = value;
                    this.SendPropertyChanged("QtyPerBox");
                    this.OnQtyPerBoxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrentSupplier in the schema.
        /// </summary>
        [Column(Name = @"current_supplier", Storage = "_CurrentSupplier", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool CurrentSupplier
        {
            get
            {
                return this._CurrentSupplier;
            }
            set
            {
                if (this._CurrentSupplier != value)
                {
                    this.OnCurrentSupplierChanging(value);
                    this.SendPropertyChanging();
                    this._CurrentSupplier = value;
                    this.SendPropertyChanged("CurrentSupplier");
                    this.OnCurrentSupplierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.RelationMaster in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.relation_master")]
    public partial class RelationMaster : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RelationMasterId;

        private string _ItemCode;

        private string _ToolingCode;

        private System.DateTime _ValidFrom;

        private System.DateTime _ValidTo;

        private bool _Deleted;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRelationMasterIdChanging(int value);
        partial void OnRelationMasterIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnToolingCodeChanging(string value);
        partial void OnToolingCodeChanged();
        partial void OnValidFromChanging(System.DateTime value);
        partial void OnValidFromChanged();
        partial void OnValidToChanging(System.DateTime value);
        partial void OnValidToChanged();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public RelationMaster()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RelationMasterId in the schema.
        /// </summary>
        [Column(Name = @"relation_master_id", Storage = "_RelationMasterId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RelationMasterId
        {
            get
            {
                return this._RelationMasterId;
            }
            set
            {
                if (this._RelationMasterId != value)
                {
                    this.OnRelationMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._RelationMasterId = value;
                    this.SendPropertyChanged("RelationMasterId");
                    this.OnRelationMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemCode in the schema.
        /// </summary>
        [Column(Name = @"item_code", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToolingCode in the schema.
        /// </summary>
        [Column(Name = @"tooling_code", Storage = "_ToolingCode", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ToolingCode
        {
            get
            {
                return this._ToolingCode;
            }
            set
            {
                if (this._ToolingCode != value)
                {
                    this.OnToolingCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ToolingCode = value;
                    this.SendPropertyChanged("ToolingCode");
                    this.OnToolingCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidFrom in the schema.
        /// </summary>
        [Column(Name = @"valid_from", Storage = "_ValidFrom", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ValidFrom
        {
            get
            {
                return this._ValidFrom;
            }
            set
            {
                if (this._ValidFrom != value)
                {
                    this.OnValidFromChanging(value);
                    this.SendPropertyChanging();
                    this._ValidFrom = value;
                    this.SendPropertyChanged("ValidFrom");
                    this.OnValidFromChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValidTo in the schema.
        /// </summary>
        [Column(Name = @"valid_to", Storage = "_ValidTo", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ValidTo
        {
            get
            {
                return this._ValidTo;
            }
            set
            {
                if (this._ValidTo != value)
                {
                    this.OnValidToChanging(value);
                    this.SendPropertyChanging();
                    this._ValidTo = value;
                    this.SendPropertyChanged("ValidTo");
                    this.OnValidToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.SupplierMaster in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.supplier_master")]
    public partial class SupplierMaster : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SupplierMasterId;

        private string _SupplierCode;

        private string _SupplierName;

        private string _AbbrName;

        private string _ProductType;

        private string _Address1;

        private string _Address2;

        private int _TermsOfPayment;

        private string _Postcode;

        private string _CountryCode;

        private string _Currency;

        private string _TelNumber;

        private string _FaxNumber;

        private bool _Deleted;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSupplierMasterIdChanging(int value);
        partial void OnSupplierMasterIdChanged();
        partial void OnSupplierCodeChanging(string value);
        partial void OnSupplierCodeChanged();
        partial void OnSupplierNameChanging(string value);
        partial void OnSupplierNameChanged();
        partial void OnAbbrNameChanging(string value);
        partial void OnAbbrNameChanged();
        partial void OnProductTypeChanging(string value);
        partial void OnProductTypeChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnTermsOfPaymentChanging(int value);
        partial void OnTermsOfPaymentChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnCurrencyChanging(string value);
        partial void OnCurrencyChanged();
        partial void OnTelNumberChanging(string value);
        partial void OnTelNumberChanged();
        partial void OnFaxNumberChanging(string value);
        partial void OnFaxNumberChanged();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public SupplierMaster()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SupplierMasterId in the schema.
        /// </summary>
        [Column(Name = @"supplier_master_id", Storage = "_SupplierMasterId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SupplierMasterId
        {
            get
            {
                return this._SupplierMasterId;
            }
            set
            {
                if (this._SupplierMasterId != value)
                {
                    this.OnSupplierMasterIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierMasterId = value;
                    this.SendPropertyChanged("SupplierMasterId");
                    this.OnSupplierMasterIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierCode in the schema.
        /// </summary>
        [Column(Name = @"supplier_code", Storage = "_SupplierCode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SupplierCode
        {
            get
            {
                return this._SupplierCode;
            }
            set
            {
                if (this._SupplierCode != value)
                {
                    this.OnSupplierCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierCode = value;
                    this.SendPropertyChanged("SupplierCode");
                    this.OnSupplierCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierName in the schema.
        /// </summary>
        [Column(Name = @"supplier_name", Storage = "_SupplierName", CanBeNull = false, DbType = "VARCHAR(60) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SupplierName
        {
            get
            {
                return this._SupplierName;
            }
            set
            {
                if (this._SupplierName != value)
                {
                    this.OnSupplierNameChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierName = value;
                    this.SendPropertyChanged("SupplierName");
                    this.OnSupplierNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AbbrName in the schema.
        /// </summary>
        [Column(Name = @"abbr_name", Storage = "_AbbrName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AbbrName
        {
            get
            {
                return this._AbbrName;
            }
            set
            {
                if (this._AbbrName != value)
                {
                    this.OnAbbrNameChanging(value);
                    this.SendPropertyChanging();
                    this._AbbrName = value;
                    this.SendPropertyChanged("AbbrName");
                    this.OnAbbrNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductType in the schema.
        /// </summary>
        [Column(Name = @"product_type", Storage = "_ProductType", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductType
        {
            get
            {
                return this._ProductType;
            }
            set
            {
                if (this._ProductType != value)
                {
                    this.OnProductTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ProductType = value;
                    this.SendPropertyChanged("ProductType");
                    this.OnProductTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address1 in the schema.
        /// </summary>
        [Column(Name = @"address1", Storage = "_Address1", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address1
        {
            get
            {
                return this._Address1;
            }
            set
            {
                if (this._Address1 != value)
                {
                    this.OnAddress1Changing(value);
                    this.SendPropertyChanging();
                    this._Address1 = value;
                    this.SendPropertyChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address2 in the schema.
        /// </summary>
        [Column(Name = @"address2", Storage = "_Address2", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address2
        {
            get
            {
                return this._Address2;
            }
            set
            {
                if (this._Address2 != value)
                {
                    this.OnAddress2Changing(value);
                    this.SendPropertyChanging();
                    this._Address2 = value;
                    this.SendPropertyChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermsOfPayment in the schema.
        /// </summary>
        [Column(Name = @"terms_of_payment", Storage = "_TermsOfPayment", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TermsOfPayment
        {
            get
            {
                return this._TermsOfPayment;
            }
            set
            {
                if (this._TermsOfPayment != value)
                {
                    this.OnTermsOfPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._TermsOfPayment = value;
                    this.SendPropertyChanged("TermsOfPayment");
                    this.OnTermsOfPaymentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postcode in the schema.
        /// </summary>
        [Column(Name = @"postcode", Storage = "_Postcode", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if (this._Postcode != value)
                {
                    this.OnPostcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Postcode = value;
                    this.SendPropertyChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryCode in the schema.
        /// </summary>
        [Column(Name = @"country_code", Storage = "_CountryCode", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CountryCode
        {
            get
            {
                return this._CountryCode;
            }
            set
            {
                if (this._CountryCode != value)
                {
                    this.OnCountryCodeChanging(value);
                    this.SendPropertyChanging();
                    this._CountryCode = value;
                    this.SendPropertyChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [Column(Name = @"currency", Storage = "_Currency", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Currency
        {
            get
            {
                return this._Currency;
            }
            set
            {
                if (this._Currency != value)
                {
                    this.OnCurrencyChanging(value);
                    this.SendPropertyChanging();
                    this._Currency = value;
                    this.SendPropertyChanged("Currency");
                    this.OnCurrencyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TelNumber in the schema.
        /// </summary>
        [Column(Name = @"tel_number", Storage = "_TelNumber", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TelNumber
        {
            get
            {
                return this._TelNumber;
            }
            set
            {
                if (this._TelNumber != value)
                {
                    this.OnTelNumberChanging(value);
                    this.SendPropertyChanging();
                    this._TelNumber = value;
                    this.SendPropertyChanged("TelNumber");
                    this.OnTelNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FaxNumber in the schema.
        /// </summary>
        [Column(Name = @"fax_number", Storage = "_FaxNumber", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FaxNumber
        {
            get
            {
                return this._FaxNumber;
            }
            set
            {
                if (this._FaxNumber != value)
                {
                    this.OnFaxNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FaxNumber = value;
                    this.SendPropertyChanged("FaxNumber");
                    this.OnFaxNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [Column(Name = @"deleted", Storage = "_Deleted", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.SupplierEvaluation in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.supplier_evaluation")]
    public partial class SupplierEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SupplierEvaluationId;

        private string _Month;

        private string _Year;

        private string _SupplierCode;

        private string _SupplierName;

        private string _DeliveryOrder;

        private string _DeliveryOntime;

        private string _DeliveryService;

        private string _DeliveryInvoice;

        private string _DeliveryDocument;

        private string _DeliveryFreight;

        private string _DeliveryTotal;

        private string _DeliverySummary;

        private string _DeliveryRank;

        private string _QualityPpm;

        private string _QualityIssued;

        private string _QualityCustomer;

        private string _QualityReply;

        private string _QualityRecurrence;

        private string _QualityData;

        private string _QualityTotal;

        private string _QualitySummary;

        private string _QualityRank;

        private string _TotalPercent;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSupplierEvaluationIdChanging(int value);
        partial void OnSupplierEvaluationIdChanged();
        partial void OnMonthChanging(string value);
        partial void OnMonthChanged();
        partial void OnYearChanging(string value);
        partial void OnYearChanged();
        partial void OnSupplierCodeChanging(string value);
        partial void OnSupplierCodeChanged();
        partial void OnSupplierNameChanging(string value);
        partial void OnSupplierNameChanged();
        partial void OnDeliveryOrderChanging(string value);
        partial void OnDeliveryOrderChanged();
        partial void OnDeliveryOntimeChanging(string value);
        partial void OnDeliveryOntimeChanged();
        partial void OnDeliveryServiceChanging(string value);
        partial void OnDeliveryServiceChanged();
        partial void OnDeliveryInvoiceChanging(string value);
        partial void OnDeliveryInvoiceChanged();
        partial void OnDeliveryDocumentChanging(string value);
        partial void OnDeliveryDocumentChanged();
        partial void OnDeliveryFreightChanging(string value);
        partial void OnDeliveryFreightChanged();
        partial void OnDeliveryTotalChanging(string value);
        partial void OnDeliveryTotalChanged();
        partial void OnDeliverySummaryChanging(string value);
        partial void OnDeliverySummaryChanged();
        partial void OnDeliveryRankChanging(string value);
        partial void OnDeliveryRankChanged();
        partial void OnQualityPpmChanging(string value);
        partial void OnQualityPpmChanged();
        partial void OnQualityIssuedChanging(string value);
        partial void OnQualityIssuedChanged();
        partial void OnQualityCustomerChanging(string value);
        partial void OnQualityCustomerChanged();
        partial void OnQualityReplyChanging(string value);
        partial void OnQualityReplyChanged();
        partial void OnQualityRecurrenceChanging(string value);
        partial void OnQualityRecurrenceChanged();
        partial void OnQualityDataChanging(string value);
        partial void OnQualityDataChanged();
        partial void OnQualityTotalChanging(string value);
        partial void OnQualityTotalChanged();
        partial void OnQualitySummaryChanging(string value);
        partial void OnQualitySummaryChanged();
        partial void OnQualityRankChanging(string value);
        partial void OnQualityRankChanged();
        partial void OnTotalPercentChanging(string value);
        partial void OnTotalPercentChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public SupplierEvaluation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SupplierEvaluationId in the schema.
        /// </summary>
        [Column(Name = @"supplier_evaluation_id", Storage = "_SupplierEvaluationId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SupplierEvaluationId
        {
            get
            {
                return this._SupplierEvaluationId;
            }
            set
            {
                if (this._SupplierEvaluationId != value)
                {
                    this.OnSupplierEvaluationIdChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierEvaluationId = value;
                    this.SendPropertyChanged("SupplierEvaluationId");
                    this.OnSupplierEvaluationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Month in the schema.
        /// </summary>
        [Column(Name = @"month", Storage = "_Month", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Month
        {
            get
            {
                return this._Month;
            }
            set
            {
                if (this._Month != value)
                {
                    this.OnMonthChanging(value);
                    this.SendPropertyChanging();
                    this._Month = value;
                    this.SendPropertyChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Year in the schema.
        /// </summary>
        [Column(Name = @"`year`", Storage = "_Year", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierCode in the schema.
        /// </summary>
        [Column(Name = @"supplier_code", Storage = "_SupplierCode", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SupplierCode
        {
            get
            {
                return this._SupplierCode;
            }
            set
            {
                if (this._SupplierCode != value)
                {
                    this.OnSupplierCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierCode = value;
                    this.SendPropertyChanged("SupplierCode");
                    this.OnSupplierCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SupplierName in the schema.
        /// </summary>
        [Column(Name = @"supplier_name", Storage = "_SupplierName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SupplierName
        {
            get
            {
                return this._SupplierName;
            }
            set
            {
                if (this._SupplierName != value)
                {
                    this.OnSupplierNameChanging(value);
                    this.SendPropertyChanging();
                    this._SupplierName = value;
                    this.SendPropertyChanged("SupplierName");
                    this.OnSupplierNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryOrder in the schema.
        /// </summary>
        [Column(Name = @"delivery_order", Storage = "_DeliveryOrder", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryOrder
        {
            get
            {
                return this._DeliveryOrder;
            }
            set
            {
                if (this._DeliveryOrder != value)
                {
                    this.OnDeliveryOrderChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryOrder = value;
                    this.SendPropertyChanged("DeliveryOrder");
                    this.OnDeliveryOrderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryOntime in the schema.
        /// </summary>
        [Column(Name = @"delivery_ontime", Storage = "_DeliveryOntime", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryOntime
        {
            get
            {
                return this._DeliveryOntime;
            }
            set
            {
                if (this._DeliveryOntime != value)
                {
                    this.OnDeliveryOntimeChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryOntime = value;
                    this.SendPropertyChanged("DeliveryOntime");
                    this.OnDeliveryOntimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryService in the schema.
        /// </summary>
        [Column(Name = @"delivery_service", Storage = "_DeliveryService", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryService
        {
            get
            {
                return this._DeliveryService;
            }
            set
            {
                if (this._DeliveryService != value)
                {
                    this.OnDeliveryServiceChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryService = value;
                    this.SendPropertyChanged("DeliveryService");
                    this.OnDeliveryServiceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryInvoice in the schema.
        /// </summary>
        [Column(Name = @"delivery_invoice", Storage = "_DeliveryInvoice", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryInvoice
        {
            get
            {
                return this._DeliveryInvoice;
            }
            set
            {
                if (this._DeliveryInvoice != value)
                {
                    this.OnDeliveryInvoiceChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryInvoice = value;
                    this.SendPropertyChanged("DeliveryInvoice");
                    this.OnDeliveryInvoiceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryDocument in the schema.
        /// </summary>
        [Column(Name = @"delivery_document", Storage = "_DeliveryDocument", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryDocument
        {
            get
            {
                return this._DeliveryDocument;
            }
            set
            {
                if (this._DeliveryDocument != value)
                {
                    this.OnDeliveryDocumentChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryDocument = value;
                    this.SendPropertyChanged("DeliveryDocument");
                    this.OnDeliveryDocumentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryFreight in the schema.
        /// </summary>
        [Column(Name = @"delivery_freight", Storage = "_DeliveryFreight", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryFreight
        {
            get
            {
                return this._DeliveryFreight;
            }
            set
            {
                if (this._DeliveryFreight != value)
                {
                    this.OnDeliveryFreightChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryFreight = value;
                    this.SendPropertyChanged("DeliveryFreight");
                    this.OnDeliveryFreightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryTotal in the schema.
        /// </summary>
        [Column(Name = @"delivery_total", Storage = "_DeliveryTotal", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryTotal
        {
            get
            {
                return this._DeliveryTotal;
            }
            set
            {
                if (this._DeliveryTotal != value)
                {
                    this.OnDeliveryTotalChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryTotal = value;
                    this.SendPropertyChanged("DeliveryTotal");
                    this.OnDeliveryTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliverySummary in the schema.
        /// </summary>
        [Column(Name = @"delivery_summary", Storage = "_DeliverySummary", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliverySummary
        {
            get
            {
                return this._DeliverySummary;
            }
            set
            {
                if (this._DeliverySummary != value)
                {
                    this.OnDeliverySummaryChanging(value);
                    this.SendPropertyChanging();
                    this._DeliverySummary = value;
                    this.SendPropertyChanged("DeliverySummary");
                    this.OnDeliverySummaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeliveryRank in the schema.
        /// </summary>
        [Column(Name = @"delivery_rank", Storage = "_DeliveryRank", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DeliveryRank
        {
            get
            {
                return this._DeliveryRank;
            }
            set
            {
                if (this._DeliveryRank != value)
                {
                    this.OnDeliveryRankChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryRank = value;
                    this.SendPropertyChanged("DeliveryRank");
                    this.OnDeliveryRankChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityPpm in the schema.
        /// </summary>
        [Column(Name = @"quality_ppm", Storage = "_QualityPpm", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityPpm
        {
            get
            {
                return this._QualityPpm;
            }
            set
            {
                if (this._QualityPpm != value)
                {
                    this.OnQualityPpmChanging(value);
                    this.SendPropertyChanging();
                    this._QualityPpm = value;
                    this.SendPropertyChanged("QualityPpm");
                    this.OnQualityPpmChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityIssued in the schema.
        /// </summary>
        [Column(Name = @"quality_issued", Storage = "_QualityIssued", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityIssued
        {
            get
            {
                return this._QualityIssued;
            }
            set
            {
                if (this._QualityIssued != value)
                {
                    this.OnQualityIssuedChanging(value);
                    this.SendPropertyChanging();
                    this._QualityIssued = value;
                    this.SendPropertyChanged("QualityIssued");
                    this.OnQualityIssuedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityCustomer in the schema.
        /// </summary>
        [Column(Name = @"quality_customer", Storage = "_QualityCustomer", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityCustomer
        {
            get
            {
                return this._QualityCustomer;
            }
            set
            {
                if (this._QualityCustomer != value)
                {
                    this.OnQualityCustomerChanging(value);
                    this.SendPropertyChanging();
                    this._QualityCustomer = value;
                    this.SendPropertyChanged("QualityCustomer");
                    this.OnQualityCustomerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityReply in the schema.
        /// </summary>
        [Column(Name = @"quality_reply", Storage = "_QualityReply", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityReply
        {
            get
            {
                return this._QualityReply;
            }
            set
            {
                if (this._QualityReply != value)
                {
                    this.OnQualityReplyChanging(value);
                    this.SendPropertyChanging();
                    this._QualityReply = value;
                    this.SendPropertyChanged("QualityReply");
                    this.OnQualityReplyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityRecurrence in the schema.
        /// </summary>
        [Column(Name = @"quality_recurrence", Storage = "_QualityRecurrence", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityRecurrence
        {
            get
            {
                return this._QualityRecurrence;
            }
            set
            {
                if (this._QualityRecurrence != value)
                {
                    this.OnQualityRecurrenceChanging(value);
                    this.SendPropertyChanging();
                    this._QualityRecurrence = value;
                    this.SendPropertyChanged("QualityRecurrence");
                    this.OnQualityRecurrenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityData in the schema.
        /// </summary>
        [Column(Name = @"quality_data", Storage = "_QualityData", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityData
        {
            get
            {
                return this._QualityData;
            }
            set
            {
                if (this._QualityData != value)
                {
                    this.OnQualityDataChanging(value);
                    this.SendPropertyChanging();
                    this._QualityData = value;
                    this.SendPropertyChanged("QualityData");
                    this.OnQualityDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityTotal in the schema.
        /// </summary>
        [Column(Name = @"quality_total", Storage = "_QualityTotal", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityTotal
        {
            get
            {
                return this._QualityTotal;
            }
            set
            {
                if (this._QualityTotal != value)
                {
                    this.OnQualityTotalChanging(value);
                    this.SendPropertyChanging();
                    this._QualityTotal = value;
                    this.SendPropertyChanged("QualityTotal");
                    this.OnQualityTotalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualitySummary in the schema.
        /// </summary>
        [Column(Name = @"quality_summary", Storage = "_QualitySummary", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualitySummary
        {
            get
            {
                return this._QualitySummary;
            }
            set
            {
                if (this._QualitySummary != value)
                {
                    this.OnQualitySummaryChanging(value);
                    this.SendPropertyChanging();
                    this._QualitySummary = value;
                    this.SendPropertyChanged("QualitySummary");
                    this.OnQualitySummaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QualityRank in the schema.
        /// </summary>
        [Column(Name = @"quality_rank", Storage = "_QualityRank", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QualityRank
        {
            get
            {
                return this._QualityRank;
            }
            set
            {
                if (this._QualityRank != value)
                {
                    this.OnQualityRankChanging(value);
                    this.SendPropertyChanging();
                    this._QualityRank = value;
                    this.SendPropertyChanged("QualityRank");
                    this.OnQualityRankChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalPercent in the schema.
        /// </summary>
        [Column(Name = @"total_percent", Storage = "_TotalPercent", CanBeNull = false, DbType = "VARCHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TotalPercent
        {
            get
            {
                return this._TotalPercent;
            }
            set
            {
                if (this._TotalPercent != value)
                {
                    this.OnTotalPercentChanging(value);
                    this.SendPropertyChanging();
                    this._TotalPercent = value;
                    this.SendPropertyChanged("TotalPercent");
                    this.OnTotalPercentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.Memo in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.memo")]
    public partial class Memo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _MemoId;

        private string _MemoNumber;

        private System.DateTime _MemoDate;

        private int _MemoYear;

        private int _MemoMonth;

        private int _MemoRunnum;

        private int _MemoType;

        private int _MemoStatus;

        private string _ApplicantName = @"NULL";

        private string _Department = @"NULL";

        private string _Subject = @"NULL";

        private string _CcEmailAddress = @"";

        private string _Detail = @"NULL";

        private int _CancelRejectStatus;

        private int _Approver1ConfirmStatus;

        private System.DateTime _Approver1ConfirmDate;

        private int _Approver1ConfirmBy;

        private int _Approver2ConfirmStatus;

        private System.DateTime _Approver2ConfirmDate;

        private int _Approver2ConfirmBy;

        private int _Approver3ConfirmStatus;

        private System.DateTime _Approver3ConfirmDate;

        private int _Approver3ConfirmBy;

        private int _Approver4ConfirmStatus;

        private System.DateTime _Approver4ConfirmDate;

        private int _Approver4ConfirmBy;

        private System.DateTime _CancelDate;

        private int _CancelBy;

        private string _ApproveRemark1 = @"";

        private string _ApproveRemark2 = @"";

        private string _ApproveRemark3 = @"";

        private string _ApproveRemark4 = @"";

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntitySet<MemoAttachment> _MemoAttachments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMemoIdChanging(int value);
        partial void OnMemoIdChanged();
        partial void OnMemoNumberChanging(string value);
        partial void OnMemoNumberChanged();
        partial void OnMemoDateChanging(System.DateTime value);
        partial void OnMemoDateChanged();
        partial void OnMemoYearChanging(int value);
        partial void OnMemoYearChanged();
        partial void OnMemoMonthChanging(int value);
        partial void OnMemoMonthChanged();
        partial void OnMemoRunnumChanging(int value);
        partial void OnMemoRunnumChanged();
        partial void OnMemoTypeChanging(int value);
        partial void OnMemoTypeChanged();
        partial void OnMemoStatusChanging(int value);
        partial void OnMemoStatusChanged();
        partial void OnApplicantNameChanging(string value);
        partial void OnApplicantNameChanged();
        partial void OnDepartmentChanging(string value);
        partial void OnDepartmentChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnCcEmailAddressChanging(string value);
        partial void OnCcEmailAddressChanged();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnCancelRejectStatusChanging(int value);
        partial void OnCancelRejectStatusChanged();
        partial void OnApprover1ConfirmStatusChanging(int value);
        partial void OnApprover1ConfirmStatusChanged();
        partial void OnApprover1ConfirmDateChanging(System.DateTime value);
        partial void OnApprover1ConfirmDateChanged();
        partial void OnApprover1ConfirmByChanging(int value);
        partial void OnApprover1ConfirmByChanged();
        partial void OnApprover2ConfirmStatusChanging(int value);
        partial void OnApprover2ConfirmStatusChanged();
        partial void OnApprover2ConfirmDateChanging(System.DateTime value);
        partial void OnApprover2ConfirmDateChanged();
        partial void OnApprover2ConfirmByChanging(int value);
        partial void OnApprover2ConfirmByChanged();
        partial void OnApprover3ConfirmStatusChanging(int value);
        partial void OnApprover3ConfirmStatusChanged();
        partial void OnApprover3ConfirmDateChanging(System.DateTime value);
        partial void OnApprover3ConfirmDateChanged();
        partial void OnApprover3ConfirmByChanging(int value);
        partial void OnApprover3ConfirmByChanged();
        partial void OnApprover4ConfirmStatusChanging(int value);
        partial void OnApprover4ConfirmStatusChanged();
        partial void OnApprover4ConfirmDateChanging(System.DateTime value);
        partial void OnApprover4ConfirmDateChanged();
        partial void OnApprover4ConfirmByChanging(int value);
        partial void OnApprover4ConfirmByChanged();
        partial void OnCancelDateChanging(System.DateTime value);
        partial void OnCancelDateChanged();
        partial void OnCancelByChanging(int value);
        partial void OnCancelByChanged();
        partial void OnApproveRemark1Changing(string value);
        partial void OnApproveRemark1Changed();
        partial void OnApproveRemark2Changing(string value);
        partial void OnApproveRemark2Changed();
        partial void OnApproveRemark3Changing(string value);
        partial void OnApproveRemark3Changed();
        partial void OnApproveRemark4Changing(string value);
        partial void OnApproveRemark4Changed();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public Memo()
        {
            this._MemoAttachments = new EntitySet<MemoAttachment>(new Action<MemoAttachment>(this.attach_MemoAttachments), new Action<MemoAttachment>(this.detach_MemoAttachments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MemoId in the schema.
        /// </summary>
        [Column(Name = @"memo_id", Storage = "_MemoId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int MemoId
        {
            get
            {
                return this._MemoId;
            }
            set
            {
                if (this._MemoId != value)
                {
                    this.OnMemoIdChanging(value);
                    this.SendPropertyChanging();
                    this._MemoId = value;
                    this.SendPropertyChanged("MemoId");
                    this.OnMemoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoNumber in the schema.
        /// </summary>
        [Column(Name = @"memo_number", Storage = "_MemoNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MemoNumber
        {
            get
            {
                return this._MemoNumber;
            }
            set
            {
                if (this._MemoNumber != value)
                {
                    this.OnMemoNumberChanging(value);
                    this.SendPropertyChanging();
                    this._MemoNumber = value;
                    this.SendPropertyChanged("MemoNumber");
                    this.OnMemoNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoDate in the schema.
        /// </summary>
        [Column(Name = @"memo_date", Storage = "_MemoDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime MemoDate
        {
            get
            {
                return this._MemoDate;
            }
            set
            {
                if (this._MemoDate != value)
                {
                    this.OnMemoDateChanging(value);
                    this.SendPropertyChanging();
                    this._MemoDate = value;
                    this.SendPropertyChanged("MemoDate");
                    this.OnMemoDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoYear in the schema.
        /// </summary>
        [Column(Name = @"memo_year", Storage = "_MemoYear", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MemoYear
        {
            get
            {
                return this._MemoYear;
            }
            set
            {
                if (this._MemoYear != value)
                {
                    this.OnMemoYearChanging(value);
                    this.SendPropertyChanging();
                    this._MemoYear = value;
                    this.SendPropertyChanged("MemoYear");
                    this.OnMemoYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoMonth in the schema.
        /// </summary>
        [Column(Name = @"memo_month", Storage = "_MemoMonth", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MemoMonth
        {
            get
            {
                return this._MemoMonth;
            }
            set
            {
                if (this._MemoMonth != value)
                {
                    this.OnMemoMonthChanging(value);
                    this.SendPropertyChanging();
                    this._MemoMonth = value;
                    this.SendPropertyChanged("MemoMonth");
                    this.OnMemoMonthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoRunnum in the schema.
        /// </summary>
        [Column(Name = @"memo_runnum", Storage = "_MemoRunnum", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MemoRunnum
        {
            get
            {
                return this._MemoRunnum;
            }
            set
            {
                if (this._MemoRunnum != value)
                {
                    this.OnMemoRunnumChanging(value);
                    this.SendPropertyChanging();
                    this._MemoRunnum = value;
                    this.SendPropertyChanged("MemoRunnum");
                    this.OnMemoRunnumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoType in the schema.
        /// </summary>
        [Column(Name = @"memo_type", Storage = "_MemoType", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MemoType
        {
            get
            {
                return this._MemoType;
            }
            set
            {
                if (this._MemoType != value)
                {
                    this.OnMemoTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MemoType = value;
                    this.SendPropertyChanged("MemoType");
                    this.OnMemoTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoStatus in the schema.
        /// </summary>
        [Column(Name = @"memo_status", Storage = "_MemoStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MemoStatus
        {
            get
            {
                return this._MemoStatus;
            }
            set
            {
                if (this._MemoStatus != value)
                {
                    this.OnMemoStatusChanging(value);
                    this.SendPropertyChanging();
                    this._MemoStatus = value;
                    this.SendPropertyChanged("MemoStatus");
                    this.OnMemoStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApplicantName in the schema.
        /// </summary>
        [Column(Name = @"applicant_name", Storage = "_ApplicantName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApplicantName
        {
            get
            {
                return this._ApplicantName;
            }
            set
            {
                if (this._ApplicantName != value)
                {
                    this.OnApplicantNameChanging(value);
                    this.SendPropertyChanging();
                    this._ApplicantName = value;
                    this.SendPropertyChanged("ApplicantName");
                    this.OnApplicantNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Department in the schema.
        /// </summary>
        [Column(Name = @"department", Storage = "_Department", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Department
        {
            get
            {
                return this._Department;
            }
            set
            {
                if (this._Department != value)
                {
                    this.OnDepartmentChanging(value);
                    this.SendPropertyChanging();
                    this._Department = value;
                    this.SendPropertyChanged("Department");
                    this.OnDepartmentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Subject in the schema.
        /// </summary>
        [Column(Name = @"subject", Storage = "_Subject", DbType = "VARCHAR(1000) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this.OnSubjectChanging(value);
                    this.SendPropertyChanging();
                    this._Subject = value;
                    this.SendPropertyChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CcEmailAddress in the schema.
        /// </summary>
        [Column(Name = @"cc_email_address", Storage = "_CcEmailAddress", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CcEmailAddress
        {
            get
            {
                return this._CcEmailAddress;
            }
            set
            {
                if (this._CcEmailAddress != value)
                {
                    this.OnCcEmailAddressChanging(value);
                    this.SendPropertyChanging();
                    this._CcEmailAddress = value;
                    this.SendPropertyChanged("CcEmailAddress");
                    this.OnCcEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Detail in the schema.
        /// </summary>
        [Column(Name = @"detail", Storage = "_Detail", DbType = "VARCHAR(3000) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Detail
        {
            get
            {
                return this._Detail;
            }
            set
            {
                if (this._Detail != value)
                {
                    this.OnDetailChanging(value);
                    this.SendPropertyChanging();
                    this._Detail = value;
                    this.SendPropertyChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelRejectStatus in the schema.
        /// </summary>
        [Column(Name = @"cancel_reject_status", Storage = "_CancelRejectStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CancelRejectStatus
        {
            get
            {
                return this._CancelRejectStatus;
            }
            set
            {
                if (this._CancelRejectStatus != value)
                {
                    this.OnCancelRejectStatusChanging(value);
                    this.SendPropertyChanging();
                    this._CancelRejectStatus = value;
                    this.SendPropertyChanged("CancelRejectStatus");
                    this.OnCancelRejectStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver1ConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"approver1_confirm_status", Storage = "_Approver1ConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver1ConfirmStatus
        {
            get
            {
                return this._Approver1ConfirmStatus;
            }
            set
            {
                if (this._Approver1ConfirmStatus != value)
                {
                    this.OnApprover1ConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Approver1ConfirmStatus = value;
                    this.SendPropertyChanged("Approver1ConfirmStatus");
                    this.OnApprover1ConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver1ConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"approver1_confirm_date", Storage = "_Approver1ConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Approver1ConfirmDate
        {
            get
            {
                return this._Approver1ConfirmDate;
            }
            set
            {
                if (this._Approver1ConfirmDate != value)
                {
                    this.OnApprover1ConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._Approver1ConfirmDate = value;
                    this.SendPropertyChanged("Approver1ConfirmDate");
                    this.OnApprover1ConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver1ConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"approver1_confirm_by", Storage = "_Approver1ConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver1ConfirmBy
        {
            get
            {
                return this._Approver1ConfirmBy;
            }
            set
            {
                if (this._Approver1ConfirmBy != value)
                {
                    this.OnApprover1ConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._Approver1ConfirmBy = value;
                    this.SendPropertyChanged("Approver1ConfirmBy");
                    this.OnApprover1ConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver2ConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"approver2_confirm_status", Storage = "_Approver2ConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver2ConfirmStatus
        {
            get
            {
                return this._Approver2ConfirmStatus;
            }
            set
            {
                if (this._Approver2ConfirmStatus != value)
                {
                    this.OnApprover2ConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Approver2ConfirmStatus = value;
                    this.SendPropertyChanged("Approver2ConfirmStatus");
                    this.OnApprover2ConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver2ConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"approver2_confirm_date", Storage = "_Approver2ConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Approver2ConfirmDate
        {
            get
            {
                return this._Approver2ConfirmDate;
            }
            set
            {
                if (this._Approver2ConfirmDate != value)
                {
                    this.OnApprover2ConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._Approver2ConfirmDate = value;
                    this.SendPropertyChanged("Approver2ConfirmDate");
                    this.OnApprover2ConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver2ConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"approver2_confirm_by", Storage = "_Approver2ConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver2ConfirmBy
        {
            get
            {
                return this._Approver2ConfirmBy;
            }
            set
            {
                if (this._Approver2ConfirmBy != value)
                {
                    this.OnApprover2ConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._Approver2ConfirmBy = value;
                    this.SendPropertyChanged("Approver2ConfirmBy");
                    this.OnApprover2ConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver3ConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"approver3_confirm_status", Storage = "_Approver3ConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver3ConfirmStatus
        {
            get
            {
                return this._Approver3ConfirmStatus;
            }
            set
            {
                if (this._Approver3ConfirmStatus != value)
                {
                    this.OnApprover3ConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Approver3ConfirmStatus = value;
                    this.SendPropertyChanged("Approver3ConfirmStatus");
                    this.OnApprover3ConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver3ConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"approver3_confirm_date", Storage = "_Approver3ConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Approver3ConfirmDate
        {
            get
            {
                return this._Approver3ConfirmDate;
            }
            set
            {
                if (this._Approver3ConfirmDate != value)
                {
                    this.OnApprover3ConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._Approver3ConfirmDate = value;
                    this.SendPropertyChanged("Approver3ConfirmDate");
                    this.OnApprover3ConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver3ConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"approver3_confirm_by", Storage = "_Approver3ConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver3ConfirmBy
        {
            get
            {
                return this._Approver3ConfirmBy;
            }
            set
            {
                if (this._Approver3ConfirmBy != value)
                {
                    this.OnApprover3ConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._Approver3ConfirmBy = value;
                    this.SendPropertyChanged("Approver3ConfirmBy");
                    this.OnApprover3ConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver4ConfirmStatus in the schema.
        /// </summary>
        [Column(Name = @"approver4_confirm_status", Storage = "_Approver4ConfirmStatus", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver4ConfirmStatus
        {
            get
            {
                return this._Approver4ConfirmStatus;
            }
            set
            {
                if (this._Approver4ConfirmStatus != value)
                {
                    this.OnApprover4ConfirmStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Approver4ConfirmStatus = value;
                    this.SendPropertyChanged("Approver4ConfirmStatus");
                    this.OnApprover4ConfirmStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver4ConfirmDate in the schema.
        /// </summary>
        [Column(Name = @"approver4_confirm_date", Storage = "_Approver4ConfirmDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Approver4ConfirmDate
        {
            get
            {
                return this._Approver4ConfirmDate;
            }
            set
            {
                if (this._Approver4ConfirmDate != value)
                {
                    this.OnApprover4ConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._Approver4ConfirmDate = value;
                    this.SendPropertyChanged("Approver4ConfirmDate");
                    this.OnApprover4ConfirmDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Approver4ConfirmBy in the schema.
        /// </summary>
        [Column(Name = @"approver4_confirm_by", Storage = "_Approver4ConfirmBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Approver4ConfirmBy
        {
            get
            {
                return this._Approver4ConfirmBy;
            }
            set
            {
                if (this._Approver4ConfirmBy != value)
                {
                    this.OnApprover4ConfirmByChanging(value);
                    this.SendPropertyChanging();
                    this._Approver4ConfirmBy = value;
                    this.SendPropertyChanged("Approver4ConfirmBy");
                    this.OnApprover4ConfirmByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelDate in the schema.
        /// </summary>
        [Column(Name = @"cancel_date", Storage = "_CancelDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CancelDate
        {
            get
            {
                return this._CancelDate;
            }
            set
            {
                if (this._CancelDate != value)
                {
                    this.OnCancelDateChanging(value);
                    this.SendPropertyChanging();
                    this._CancelDate = value;
                    this.SendPropertyChanged("CancelDate");
                    this.OnCancelDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CancelBy in the schema.
        /// </summary>
        [Column(Name = @"cancel_by", Storage = "_CancelBy", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CancelBy
        {
            get
            {
                return this._CancelBy;
            }
            set
            {
                if (this._CancelBy != value)
                {
                    this.OnCancelByChanging(value);
                    this.SendPropertyChanging();
                    this._CancelBy = value;
                    this.SendPropertyChanged("CancelBy");
                    this.OnCancelByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveRemark1 in the schema.
        /// </summary>
        [Column(Name = @"approve_remark1", Storage = "_ApproveRemark1", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApproveRemark1
        {
            get
            {
                return this._ApproveRemark1;
            }
            set
            {
                if (this._ApproveRemark1 != value)
                {
                    this.OnApproveRemark1Changing(value);
                    this.SendPropertyChanging();
                    this._ApproveRemark1 = value;
                    this.SendPropertyChanged("ApproveRemark1");
                    this.OnApproveRemark1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveRemark2 in the schema.
        /// </summary>
        [Column(Name = @"approve_remark2", Storage = "_ApproveRemark2", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApproveRemark2
        {
            get
            {
                return this._ApproveRemark2;
            }
            set
            {
                if (this._ApproveRemark2 != value)
                {
                    this.OnApproveRemark2Changing(value);
                    this.SendPropertyChanging();
                    this._ApproveRemark2 = value;
                    this.SendPropertyChanged("ApproveRemark2");
                    this.OnApproveRemark2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveRemark3 in the schema.
        /// </summary>
        [Column(Name = @"approve_remark3", Storage = "_ApproveRemark3", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApproveRemark3
        {
            get
            {
                return this._ApproveRemark3;
            }
            set
            {
                if (this._ApproveRemark3 != value)
                {
                    this.OnApproveRemark3Changing(value);
                    this.SendPropertyChanging();
                    this._ApproveRemark3 = value;
                    this.SendPropertyChanged("ApproveRemark3");
                    this.OnApproveRemark3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApproveRemark4 in the schema.
        /// </summary>
        [Column(Name = @"approve_remark4", Storage = "_ApproveRemark4", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApproveRemark4
        {
            get
            {
                return this._ApproveRemark4;
            }
            set
            {
                if (this._ApproveRemark4 != value)
                {
                    this.OnApproveRemark4Changing(value);
                    this.SendPropertyChanging();
                    this._ApproveRemark4 = value;
                    this.SendPropertyChanged("ApproveRemark4");
                    this.OnApproveRemark4Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoAttachments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Memo_MemoAttachment", Storage="_MemoAttachments", ThisKey="MemoId", OtherKey="MemoId", DeleteRule="RESTRICT")]
        public EntitySet<MemoAttachment> MemoAttachments
        {
            get
            {
                return this._MemoAttachments;
            }
            set
            {
                this._MemoAttachments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_MemoAttachments(MemoAttachment entity)
        {
            this.SendPropertyChanging("MemoAttachments");
            entity.Memo = this;
        }
    
        private void detach_MemoAttachments(MemoAttachment entity)
        {
            this.SendPropertyChanging("MemoAttachments");
            entity.Memo = null;
        }
    }

    /// <summary>
    /// There are no comments for DotBambooDAL.MemoAttachment in the schema.
    /// </summary>
    [Table(Name = @"netkamemo.memo_attachment")]
    public partial class MemoAttachment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _MemoAttachmentId;

        private int _MemoId;

        private string _MemoNumber;

        private string _Filename;

        private byte[] _Content;

        private System.DateTime _InsertDate;

        private int _InsertUserAccountId;

        private System.DateTime _UpdateDate;

        private int _UpdateUserAccountId;

        private System.DateTime _Version;
        #pragma warning restore 0649

        private EntityRef<Memo> _Memo;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMemoAttachmentIdChanging(int value);
        partial void OnMemoAttachmentIdChanged();
        partial void OnMemoIdChanging(int value);
        partial void OnMemoIdChanged();
        partial void OnMemoNumberChanging(string value);
        partial void OnMemoNumberChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnInsertUserAccountIdChanging(int value);
        partial void OnInsertUserAccountIdChanged();
        partial void OnUpdateDateChanging(System.DateTime value);
        partial void OnUpdateDateChanged();
        partial void OnUpdateUserAccountIdChanging(int value);
        partial void OnUpdateUserAccountIdChanged();
        partial void OnVersionChanging(System.DateTime value);
        partial void OnVersionChanged();
        #endregion

        public MemoAttachment()
        {
            this._Memo  = default(EntityRef<Memo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MemoAttachmentId in the schema.
        /// </summary>
        [Column(Name = @"memo_attachment_id", Storage = "_MemoAttachmentId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int MemoAttachmentId
        {
            get
            {
                return this._MemoAttachmentId;
            }
            set
            {
                if (this._MemoAttachmentId != value)
                {
                    this.OnMemoAttachmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._MemoAttachmentId = value;
                    this.SendPropertyChanged("MemoAttachmentId");
                    this.OnMemoAttachmentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoId in the schema.
        /// </summary>
        [Column(Name = @"memo_id", Storage = "_MemoId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MemoId
        {
            get
            {
                return this._MemoId;
            }
            set
            {
                if (this._MemoId != value)
                {
                    if (this._Memo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMemoIdChanging(value);
                    this.SendPropertyChanging();
                    this._MemoId = value;
                    this.SendPropertyChanged("MemoId");
                    this.OnMemoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MemoNumber in the schema.
        /// </summary>
        [Column(Name = @"memo_number", Storage = "_MemoNumber", CanBeNull = false, DbType = "VARCHAR(15) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MemoNumber
        {
            get
            {
                return this._MemoNumber;
            }
            set
            {
                if (this._MemoNumber != value)
                {
                    this.OnMemoNumberChanging(value);
                    this.SendPropertyChanging();
                    this._MemoNumber = value;
                    this.SendPropertyChanged("MemoNumber");
                    this.OnMemoNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filename in the schema.
        /// </summary>
        [Column(Name = @"filename", Storage = "_Filename", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if (this._Filename != value)
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [Column(Name = @"content", Storage = "_Content", CanBeNull = false, DbType = "LONGBLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this.OnContentChanging(value);
                    this.SendPropertyChanging();
                    this._Content = value;
                    this.SendPropertyChanged("Content");
                    this.OnContentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertDate in the schema.
        /// </summary>
        [Column(Name = @"insert_date", Storage = "_InsertDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if (this._InsertDate != value)
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InsertUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"insert_user_account_id", Storage = "_InsertUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int InsertUserAccountId
        {
            get
            {
                return this._InsertUserAccountId;
            }
            set
            {
                if (this._InsertUserAccountId != value)
                {
                    this.OnInsertUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._InsertUserAccountId = value;
                    this.SendPropertyChanged("InsertUserAccountId");
                    this.OnInsertUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateDate in the schema.
        /// </summary>
        [Column(Name = @"update_date", Storage = "_UpdateDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this._UpdateDate;
            }
            set
            {
                if (this._UpdateDate != value)
                {
                    this.OnUpdateDateChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateDate = value;
                    this.SendPropertyChanged("UpdateDate");
                    this.OnUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateUserAccountId in the schema.
        /// </summary>
        [Column(Name = @"update_user_account_id", Storage = "_UpdateUserAccountId", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UpdateUserAccountId
        {
            get
            {
                return this._UpdateUserAccountId;
            }
            set
            {
                if (this._UpdateUserAccountId != value)
                {
                    this.OnUpdateUserAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateUserAccountId = value;
                    this.SendPropertyChanged("UpdateUserAccountId");
                    this.OnUpdateUserAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Memo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Memo_MemoAttachment", Storage="_Memo", ThisKey="MemoId", OtherKey="MemoId", IsForeignKey=true)]
        public Memo Memo
        {
            get
            {
                return this._Memo.Entity;
            }
            set
            {
                Memo previousValue = this._Memo.Entity;
                if ((previousValue != value) || (this._Memo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Memo.Entity = null;
                        previousValue.MemoAttachments.Remove(this);
                    }
                    this._Memo.Entity = value;
                    if (value != null)
                    {
                        this._MemoId = value.MemoId;
                        value.MemoAttachments.Add(this);
                    }
                    else
                    {
                        this._MemoId = default(int);
                    }
                    this.SendPropertyChanged("Memo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
